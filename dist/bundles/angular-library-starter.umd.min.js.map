{"version":3,"file":"angular-library-starter.umd.min.js","sources":["../../src/auth-configuration.ts","../../src/services/oidc-auth-storage.service.ts","../../src/services/well-known-endpoints.service.ts","../../src/services/oidc-auth.service.ts","../../src/modules/oidc-auth.module.ts","../../packages/http/src/static_request.ts","../../packages/http/src/http.ts","../../packages/http/src/http_module.ts","../../packages/http/src/base_request_options.ts","../../packages/http/src/backends/xhr_backend.ts","../../packages/http/src/backends/jsonp_backend.ts","../../packages/http/src/http_utils.ts","../../packages/http/src/url_search_params.ts","../../packages/http/src/body.ts","../../packages/http/src/static_response.ts","../../packages/http/src/backends/browser_jsonp.ts","../../packages/http/src/backends/browser_xhr.ts","../../packages/http/src/enums.ts","../../packages/http/src/headers.ts","../../packages/http/src/base_response_options.ts","../../packages/platform-browser/src/security/url_sanitizer.ts","../../packages/platform-browser/src/security/html_sanitizer.ts","../../packages/platform-browser/src/security/dom_sanitization_service.ts","../../packages/platform-browser/src/browser.ts","../../packages/platform-browser/src/dom/events/key_events.ts","../../packages/platform-browser/src/dom/events/hammer_gestures.ts","../../packages/platform-browser/src/dom/dom_renderer.ts","../../packages/platform-browser/src/dom/events/dom_events.ts","../../packages/platform-browser/src/dom/debug/ng_probe.ts","../../packages/platform-browser/src/dom/events/event_manager.ts","../../packages/platform-browser/src/dom/shared_styles_host.ts","../../packages/platform-browser/src/browser/server-transition.ts","../../packages/platform-browser/src/browser/testability.ts","../../packages/platform-browser/src/browser/title.ts","../../packages/platform-browser/src/browser/meta.ts","../../node_modules/tslib/tslib.es6.js","../../packages/platform-browser/src/browser/browser_adapter.ts","../../packages/platform-browser/src/dom/dom_adapter.ts","../../packages/platform-browser/src/browser/generic_browser_adapter.ts","../../packages/platform-browser/src/browser/location/browser_platform_location.ts","../../packages/platform-browser/src/security/style_sanitizer.ts","../../packages/platform-browser/src/dom/dom_tokens.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nexport type NavigationMode = number;\nexport let NavigationMode: any = {};\nNavigationMode.SilentOnly = 0;\nNavigationMode.Redirect = 1;\nNavigationMode[NavigationMode.SilentOnly] = \"SilentOnly\";\nNavigationMode[NavigationMode.Redirect] = \"Redirect\";\n\nexport class AuthConfiguration {\nconstructor() {\r\n        // TODO: Set default values\r\n    }\npublic authorityUrl : string;\npublic enableSilentTokenRenewal: boolean;\npublic enableSessionCheck : boolean;\npublic sessionCheckIntervalInSeconds : number;\npublic silentTokenRenewalIntervalInSeconds : number;\npublic clientId : string;\npublic scopes : string[];\npublic navigationMode : NavigationMode;\npublic redirectUrl : string;\npublic postLogoutRedirectUri : string;\npublic storage: Storage;\n/**\n * @return {?}\n */\npublic isValid() : boolean {\r\n        if(!this.validateString(this.authorityUrl, \"The authorityUrl cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(!this.authorityUrl.startsWith(\"https://\"))\r\n        {\r\n            if(this.authorityUrl.startsWith(\"http://\")) {\r\n                console.warn(\"Make sure you are using the HTTPS version of the authorityUrl in production!\");\r\n            }\r\n            else {\r\n                console.error(\"The authorityUrl is not valid, it must start with https:// or http://\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if(!this.validateString(this.clientId, \"The clientId cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(!this.validateString(this.redirectUrl, \"The redirectUrl cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(this.scopes == undefined || this.scopes.length == 0 || this.scopes.every((item) => item == \"\")) {\r\n            console.error(\"There has to be at least one requested scope.\");\r\n            return false;\r\n        }\r\n\r\n        // TODO: validate urls properly, warn when url is only http\r\n        return true;\r\n    }\n/**\n * @return {?}\n */\npublic getWellKnownEndpointsUrl() : string {\r\n        return this.authorityUrl + '/.well-known/openid-configuration';\r\n    }\n/**\n * @param {?} validatedValue\n * @param {?} errorMsg\n * @return {?}\n */\nprivate validateString(validatedValue: string, errorMsg: string) : boolean {\r\n        if(validatedValue == undefined || validatedValue == \"\") {\r\n            console.error(errorMsg);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthConfiguration.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthConfiguration.ctorParameters;\n/** @type {?} */\nAuthConfiguration.prototype.authorityUrl;\n/** @type {?} */\nAuthConfiguration.prototype.enableSilentTokenRenewal;\n/** @type {?} */\nAuthConfiguration.prototype.enableSessionCheck;\n/** @type {?} */\nAuthConfiguration.prototype.sessionCheckIntervalInSeconds;\n/** @type {?} */\nAuthConfiguration.prototype.silentTokenRenewalIntervalInSeconds;\n/** @type {?} */\nAuthConfiguration.prototype.clientId;\n/** @type {?} */\nAuthConfiguration.prototype.scopes;\n/** @type {?} */\nAuthConfiguration.prototype.navigationMode;\n/** @type {?} */\nAuthConfiguration.prototype.redirectUrl;\n/** @type {?} */\nAuthConfiguration.prototype.postLogoutRedirectUri;\n/** @type {?} */\nAuthConfiguration.prototype.storage;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { SilentFetchBase } from './silent-fetch-base.service';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { WellKnownEndpoints } from './well-known-endpoints.service';\nexport class OidcAuthStorage {\nprivate wellKnownEndpointsKey : string = \"\";\n/**\n * @param {?} authConfig\n */\nconstructor(private authConfig: AuthConfiguration) {\r\n    }\n/**\n * @return {?}\n */\ngetWellKnownEndpoints(): WellKnownEndpoints | undefined {\r\n        if(!isPlatformBrowser)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var /** @type {?} */ storageValue = this.authConfig.storage.getItem(this.wellKnownEndpointsKey);\r\n        \r\n        if(!storageValue || storageValue == undefined)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var /** @type {?} */ obj = JSON.parse(storageValue);\r\n        var /** @type {?} */ result = /** @type {?} */(( obj as WellKnownEndpoints));\r\n\r\n        return result;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nsetWellKnownEndpoints(value:WellKnownEndpoints) {\r\n        var /** @type {?} */ str = JSON.stringify(value);\r\n        this.authConfig.storage.setItem(this.wellKnownEndpointsKey, str);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction OidcAuthStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthStorage.ctorParameters;\n/** @type {?} */\nOidcAuthStorage.prototype.wellKnownEndpointsKey;\n/** @type {?} */\nOidcAuthStorage.prototype.authConfig;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Output, EventEmitter } from '@angular/core';\r\nimport { SilentFetchBase } from './silent-fetch-base.service';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { Http } from '@angular/http';\r\nimport { OidcAuthStorage } from './oidc-auth-storage.service';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\nexport class WellKnownEndpointsService {\nprivate endpoints: WellKnownEndpoints;\n/**\n * @param {?} authConfig\n * @param {?} http\n * @param {?} storage\n */\nconstructor(private authConfig: AuthConfiguration,\nprivate http: Http,\nprivate storage: OidcAuthStorage) {\r\n    }\r\n\r\n     onWellKnownEndpointsLoaded: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @return {?}\n */\npublic ensureEndpoints() : void {\r\n        var /** @type {?} */ storageValue = this.storage.getWellKnownEndpoints();\r\n        \r\n        if(!storageValue) {\r\n            console.debug(\"Fetching endpoints from the server \" + this.authConfig.getWellKnownEndpointsUrl() + \".\");\r\n            this.fetchEndpoints();\r\n        }\r\n        else {\r\n            console.debug(\"Loading endpoints from the storage.\")\r\n            this.endpoints = storageValue;\r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate fetchEndpoints() : void {\r\n        this.http.get(this.authConfig.getWellKnownEndpointsUrl()).subscribe((data) => {\r\n            var /** @type {?} */ jsonResponse = data.json();\r\n            var /** @type {?} */ parsed = new WellKnownEndpoints();\r\n            parsed.authorizationEndpointUri = jsonResponse.authorization_endpoint;\r\n\r\n            this.endpoints = parsed;\r\n            this.storage.setWellKnownEndpoints(this.endpoints);\r\n            \r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: Http, },\n{type: OidcAuthStorage, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onWellKnownEndpointsLoaded': [{ type: Output },],\n};\n}\n\nfunction WellKnownEndpointsService_tsickle_Closure_declarations() {\n/** @type {?} */\nWellKnownEndpointsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWellKnownEndpointsService.ctorParameters;\n/** @type {?} */\nWellKnownEndpointsService.propDecorators;\n/** @type {?} */\nWellKnownEndpointsService.prototype.endpoints;\n/** @type {?} */\nWellKnownEndpointsService.prototype.onWellKnownEndpointsLoaded;\n/** @type {?} */\nWellKnownEndpointsService.prototype.authConfig;\n/** @type {?} */\nWellKnownEndpointsService.prototype.http;\n/** @type {?} */\nWellKnownEndpointsService.prototype.storage;\n}\n\nexport class WellKnownEndpoints {\npublic authorizationEndpointUri : string;\r\n}\n\nfunction WellKnownEndpoints_tsickle_Closure_declarations() {\n/** @type {?} */\nWellKnownEndpoints.prototype.authorizationEndpointUri;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { WellKnownEndpointsService } from './well-known-endpoints.service';\r\nimport { isPlatformBrowser } from '@angular/common';\nexport class OidcAuthService {\n/**\n * @param {?} wellKnownEndpointsService\n */\nconstructor(private wellKnownEndpointsService: WellKnownEndpointsService) {\r\n    }\r\n\r\n     setupComplete: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @param {?} config\n * @return {?}\n */\npublic setup(config : AuthConfiguration) {\r\n\r\n        if(config == undefined) {\r\n            console.error(\"The configuration is null/undefined.\");\r\n        }\r\n\r\n        if(!config.isValid()){\r\n            console.error(\"The configuration is invalid, please fix the errors above.\");\r\n        }\r\n\r\n        this.wellKnownEndpointsService.onWellKnownEndpointsLoaded.subscribe(() => {\r\n            // Continue setup in here when the endpoints have been loaded\r\n\r\n            /*\r\n            Usecases\r\n                -> page is first load -> fetch token silently or redirect\r\n                -> page reload -> token in storage (no need to wait...)\r\n                -> page is a return from the authentication -> parse the tokens from the hash part of the url (no need to wait...)\r\n                -> start background stuff (has to wait)\r\n                    -> session-check\r\n                    -> token renewal\r\n            */\r\n\r\n            this.setupComplete.emit();\r\n        });\r\n\r\n        this.wellKnownEndpointsService.ensureEndpoints();\r\n    }\npublic tokenExpired : Observable<void>;\npublic isAuthorized : Observable<boolean>;\n/**\n * @return {?}\n */\npublic getToken() : string{\r\n        return \"\";\r\n    }\n/**\n * @return {?}\n */\npublic addAuthHeaders(/*options args*/) : void {\r\n\r\n    }\n/**\n * @return {?}\n */\nprivate parseTokenFromLocation() : boolean {\r\n        if(!isPlatformBrowser || !window.location.hash){\r\n            return false;\r\n        }\r\n\r\n        return this.parseTokenFromHash(window.location.hash);\r\n    }\n/**\n * @param {?} hash\n * @return {?}\n */\nprivate parseTokenFromHash(hash: string) : boolean {\r\n        if(!isPlatformBrowser || !window.location.hash){\r\n            return false;\r\n        }\r\n\r\n        var /** @type {?} */ parsed = this.parseHash(window.location.hash);\r\n        // If token(s) are found and are valid, save them to storage and\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} hash\n * @return {?}\n */\nprivate parseHash(hash: string) : any {\r\n        let /** @type {?} */ result: any = hash.substr(1).split('&').reduce(function (result: any, item: string) {\r\n            let /** @type {?} */ parts = item.split('=');\r\n            result[parts[0]] = parts[1];\r\n            return result;\r\n        }, {});\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WellKnownEndpointsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'setupComplete': [{ type: Output },],\n};\n}\n\nfunction OidcAuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthService.ctorParameters;\n/** @type {?} */\nOidcAuthService.propDecorators;\n/** @type {?} */\nOidcAuthService.prototype.setupComplete;\n/** @type {?} */\nOidcAuthService.prototype.tokenExpired;\n/** @type {?} */\nOidcAuthService.prototype.isAuthorized;\n/** @type {?} */\nOidcAuthService.prototype.wellKnownEndpointsService;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcAuthService } from '../services/oidc-auth.service';\nexport class OidcAuthModule {\n/**\n * Use in AppModule: new instance of SumService.\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: OidcAuthModule,\n            providers: [OidcAuthService]\n        };\n    }\n/**\n * Use in features modules with lazy loading: new instance of SumService.\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: OidcAuthModule,\n            providers: [OidcAuthService]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OidcAuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n/**\n * Http method with which to perform the request.\n */\nmethod: RequestMethod;\n/**\n * {\\@link Headers} instance\n */\nheaders: Headers;\n/**\n * Url of the remote resource\n */\nurl: string;\n/**\n * Type of the request body *\n */\nprivate contentType: ContentType;\n/**\n * Enable use credentials\n */\nwithCredentials: boolean;\n/**\n * Buffer to store the response\n */\nresponseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const /** @type {?} */ searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const /** @type {?} */ value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer: ArrayBufferConstructor =\n    ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const /** @type {?} */ newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return /** @type {?} */(( newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs));\n  }\n\n  return /** @type {?} */(( newOptions.merge(new RequestOptions({method, url})) as RequestArgs));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n * \n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n * \n * ### Example\n * \n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({ \n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n * \n * \n * ### Example\n * \n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n * \n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n * \n * ### Example\n * \n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n * \n * \\@experimental\n */\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n * Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n/**\n * Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n/**\n * Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n/**\n * Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n/**\n * Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n/**\n * Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n/**\n * Performs a request with `options` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Http_tsickle_Closure_declarations() {\n/** @type {?} */\nHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttp.ctorParameters;\n/** @type {?} */\nHttp.prototype._backend;\n/** @type {?} */\nHttp.prototype._defaultOptions;\n}\n\n/**\n * \\@experimental\n */\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * \n * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n * supported by all current browsers. Because JSONP creates a `<script>` element with\n * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n * source could expose your application to XSS risks. Data exposed by JSONP may also be\n * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n * future security issues (e.g. content sniffing).  For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Jsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * \\@experimental\n */\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * \\@experimental\n */\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n */\nmethod: RequestMethod|string|null;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n */\nheaders: Headers|null;\n/**\n * Body to be used when creating a {\\@link Request}.\n */\nbody: any;\n/**\n * Url with which to perform a {\\@link Request}.\n */\nurl: string|null;\n/**\n * Search parameters to be included in a {\\@link Request}.\n */\nparams: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n/**\n * Enable use credentials for a {\\@link Request}.\n */\nwithCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * const req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?=} params\n * @return {?}\n */\nprivate _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n */\nresponse: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n/**\n * The {\\@link ReadyState} of this request.\n */\nreadyState: ReadyState;\n/**\n * The outgoing HTTP request.\n */\nrequest: Request;\n/**\n * An observable that completes with the response, when the request is finished.\n */\nresponse: Observable<Response>;\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {}\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint8Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * \n * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n * bytes in the buffer will be interpreted. Valid values are:\n * \n * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n *   into consideration. This is the default behavior to avoid breaking apps, but should be\n *   considered deprecated.\n * \n * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n * @param {?=} encodingHint\n * @return {?}\n */\ntext(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((this._body as ArrayBuffer))));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */((this._body as ArrayBuffer))));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * \\@experimental\n */\nexport class Response extends Body {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n */\ntype: ResponseType;\n/**\n * True if the response's status is within 200-299\n */\nok: boolean;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n */\nurl: string;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n */\nstatus: number;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n */\nstatusText: string|null;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n */\nbytesLoaded: number;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n */\ntotalBytes: number;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n */\nheaders: Headers|null;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any}|null = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * \\@experimental\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type RequestMethod = number;\nexport let RequestMethod: any = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n\nexport type ReadyState = number;\nexport let ReadyState: any = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n\nexport type ResponseType = number;\nexport let ResponseType: any = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n\nexport type ContentType = number;\nexport let ContentType: any = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n\nexport type ResponseContentType = number;\nexport let ResponseContentType: any = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n","\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class Headers {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[ /** @type {?} */((this._normalizedNames.get(name)))] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n */\nbody: string|Object|ArrayBuffer|Blob|null;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n */\nstatus: number|null;\n/**\n * Response {\\@link Headers headers}\n */\nheaders: Headers|null;\n/**\n * \\@internal\n */\nstatusText: string|null;\n/**\n * \\@internal\n */\ntype: ResponseType|null;\n  url: string|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst /** @type {?} */ SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/* A pattern that matches safe srcset values */\nconst /** @type {?} */ SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nconst /** @type {?} */ DATA_URL_PATTERN =\n    /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n\n  if (isDevMode()) {\n    getDOM().log(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset: string): string {\n  srcset = String(srcset);\n  return srcset.split(',').map((srcset) => sanitizeUrl(srcset.trim())).join(', ');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeSrcset, sanitizeUrl} from './url_sanitizer';\n\n/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */\nlet /** @type {?} */ inertElement: HTMLElement|null = null;\n/** Lazily initialized to make sure the DOM adapter gets set before use. */\nlet /** @type {?} */ DOM: DomAdapter = /** @type {?} */(( null));\n/**\n * Returns an HTML element that is guaranteed to not execute code when creating elements in it.\n * @return {?}\n */\nfunction getInertElement() {\n  if (inertElement) return inertElement;\n  DOM = getDOM();\n\n  // Prefer using <template> element if supported.\n  const /** @type {?} */ templateEl = DOM.createElement('template');\n  if ('content' in templateEl) return templateEl;\n\n  const /** @type {?} */ doc = DOM.createHtmlDocument();\n  inertElement = DOM.querySelector(doc, 'body');\n  if (inertElement == null) {\n    // usually there should be only one body element in the document, but IE doesn't have any, so we\n    // need to create one.\n    const /** @type {?} */ html = DOM.createElement('html', doc);\n    inertElement = DOM.createElement('body', doc);\n    DOM.appendChild(html, inertElement);\n    DOM.appendChild(doc, html);\n  }\n  return inertElement;\n}\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ t of tags.split(',')) res[t] = true;\n  return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ s of sets) {\n    for (const /** @type {?} */ v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nconst /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nconst /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst /** @type {?} */ BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst /** @type {?} */ INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nconst /** @type {?} */ VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nconst /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nconst /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');\n\nconst /** @type {?} */ HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nconst /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\npublic sanitizedSomething = false;\nprivate buf: string[] = [];\n/**\n * @param {?} el\n * @return {?}\n */\nsanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let /** @type {?} */ current: Node = /** @type {?} */(( el.firstChild));\n    while (current) {\n      if (DOM.isElementNode(current)) {\n        this.startElement( /** @type {?} */((current as Element)));\n      } else if (DOM.isTextNode(current)) {\n        this.chars( /** @type {?} */((DOM.nodeValue(current))));\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (DOM.firstChild(current)) {\n        current = /** @type {?} */(( DOM.firstChild(current)));\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (DOM.isElementNode(current)) {\n          this.endElement( /** @type {?} */((current as Element)));\n        }\n\n        let /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */(( DOM.nextSibling(current))));\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = checkClobberedElement(current, /** @type {?} */(( DOM.parentElement(current))));\n      }\n    }\n    return this.buf.join('');\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate startElement(element: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return;\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    DOM.attributeMap(element).forEach((value: string, attrName: string) => {\n      const /** @type {?} */ lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        return;\n      }\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ');\n      this.buf.push(attrName);\n      this.buf.push('=\"');\n      this.buf.push(encodeEntities(value));\n      this.buf.push('\"');\n    });\n    this.buf.push('>');\n  }\n/**\n * @param {?} current\n * @return {?}\n */\nprivate endElement(current: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n/**\n * @param {?} chars\n * @return {?}\n */\nprivate chars(chars: string) { this.buf.push(encodeEntities(chars)); }\n}\n\nfunction SanitizingHtmlSerializer_tsickle_Closure_declarations() {\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.sanitizedSomething;\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.buf;\n}\n\n/**\n * @param {?} node\n * @param {?} nextNode\n * @return {?}\n */\nfunction checkClobberedElement(node: Node, nextNode: Node): Node {\n  if (nextNode && DOM.contains(node, nextNode)) {\n    throw new Error(\n        `Failed to sanitize html because the element is clobbered: ${DOM.getOuterHTML(node)}`);\n  }\n  return nextNode;\n}\n\n// Regular Expressions for parsing tags and attributes\nconst /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const /** @type {?} */ hi = match.charCodeAt(0);\n            const /** @type {?} */ low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) { return '&#' + match.charCodeAt(0) + ';'; })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n/**\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\n * \n * This is undesirable since we don't want to allow any of these custom attributes. This method\n * strips them all.\n * @param {?} el\n * @return {?}\n */\nfunction stripCustomNsAttrs(el: Element) {\n  DOM.attributeMap(el).forEach((_, attrName) => {\n    if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n      DOM.removeAttribute(el, attrName);\n    }\n  });\n  for (const /** @type {?} */ n of DOM.childNodesAsList(el)) {\n    if (DOM.isElementNode(n)) stripCustomNsAttrs( /** @type {?} */((n as Element)));\n  }\n}\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string {\n  try {\n    const /** @type {?} */ containerEl = getInertElement();\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let /** @type {?} */ mXSSAttempts = 5;\n    let /** @type {?} */ parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      DOM.setInnerHTML(containerEl, unsafeHtml);\n      if (defaultDoc.documentMode) {\n        // strip custom-namespaced attributes on IE<=11\n        stripCustomNsAttrs(containerEl);\n      }\n      parsedHtml = DOM.getInnerHTML(containerEl);\n    } while (unsafeHtml !== parsedHtml);\n\n    const /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\n    const /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\n\n    // Clear out the body element.\n    const /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;\n    for (const /** @type {?} */ child of DOM.childNodesAsList(parent)) {\n      DOM.removeChild(parent, child);\n    }\n\n    if (isDevMode() && sanitizer.sanitizedSomething) {\n      DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n    }\n\n    return safeHtml;\n  } catch ( /** @type {?} */e) {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    inertElement = null;\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nimport {sanitizeHtml} from './html_sanitizer';\nimport {sanitizeStyle} from './style_sanitizer';\nimport {sanitizeUrl} from './url_sanitizer';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @stable\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @stable\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @stable\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @stable\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @stable\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @stable\n */\nexport interface SafeResourceUrl extends SafeValue {}\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n * \n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n * \n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n * \n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n * \n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n * \n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n * \n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n * \n * \\@stable\n * @abstract\n */\nexport abstract class DomSanitizer implements Sanitizer {\n/**\n * Sanitizes a value for use in the given SecurityContext.\n * \n * If value is trusted for the context, this method will unwrap the contained safe value and use\n * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n * is responsible to make sure that the value can definitely be safely used in the given context.\n * @abstract\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nsanitize(context: SecurityContext, value: SafeValue|string|null) {}\n/**\n * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n * leave safe HTML intact, so in most situations this method should not be used.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string) {}\n/**\n * Bypass security and trust the given value to be safe style value (CSS).\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string) {}\n/**\n * Bypass security and trust the given value to be safe JavaScript.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n * in hyperlinks or `<img src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string) {}\n}\nexport class DomSanitizerImpl extends DomSanitizer {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { super(); }\n/**\n * @param {?} ctx\n * @param {?} value\n * @return {?}\n */\nsanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return /** @type {?} */(( value as string));\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return sanitizeStyle( /** @type {?} */((value as string)));\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @param {?} expectedType\n * @return {?}\n */\nprivate checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSanitizerImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSanitizerImpl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSanitizerImpl.ctorParameters;\n/** @type {?} */\nDomSanitizerImpl.prototype._doc;\n}\n\n/**\n * @abstract\n */\nabstract class SafeValueImpl implements SafeValue {\n/**\n * @param {?} changingThisBreaksApplicationSecurity\n */\nconstructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n/**\n * @abstract\n * @return {?}\n */\ngetTypeName() {}\n/**\n * @return {?}\n */\ntoString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nfunction SafeValueImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n/**\n * @return {?}\n */\ngetTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'ResourceURL'; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule, PlatformLocation, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ErrorHandler, ModuleWithProviders, NgModule, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, Provider, RendererFactory2, RootRenderer, Sanitizer, SkipSelf, Testability, createPlatformFactory, platformCore} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserPlatformLocation} from './browser/location/browser_platform_location';\nimport {Meta} from './browser/meta';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {Title} from './browser/title';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {getDOM} from './dom/dom_adapter';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DOCUMENT} from './dom/dom_tokens';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_GESTURE_CONFIG, HammerGestureConfig, HammerGesturesPlugin} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport const /** @type {?} */ INTERNAL_BROWSER_PLATFORM_PROVIDERS: Provider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n/**\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * \\@experimental\n */\nexport const BROWSER_SANITIZATION_PROVIDERS: Array<any> = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl},\n];\n/**\n * \\@stable\n */\nexport const platformBrowser: (extraProviders?: Provider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n/**\n * @return {?}\n */\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n/**\n * @return {?}\n */\nexport function _document(): any {\n  return document;\n}\n/**\n * The ng module for the browser.\n * \n * \\@stable\n */\nexport class BrowserModule {\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: BrowserModule) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n/**\n * Configures a browser-based application to transition from a server-rendered app, if\n * one is present on the page. The specified parameters must include an application id,\n * which must match between the client and server applications.\n * \n * \\@experimental\n * @param {?} params\n * @return {?}\n */\nstatic withServerTransition(params: {appId: string}): ModuleWithProviders {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    BROWSER_SANITIZATION_PROVIDERS,\n    {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true},\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig},\n    DomRendererFactory2,\n    {provide: RendererFactory2, useExisting: DomRendererFactory2},\n    {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n    DomSharedStylesHost,\n    Testability,\n    EventManager,\n    ELEMENT_PROBE_PROVIDERS,\n    Meta,\n    Title,\n  ],\n  exports: [CommonModule, ApplicationModule]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction BrowserModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst /** @type {?} */ MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n/**\n * \\@experimental\n */\nexport class KeyEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n */\nconstructor( doc: any) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ parsedEvent = /** @type {?} */(( KeyEventsPlugin.parseEventName(eventName)));\n\n    const /** @type {?} */ outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nstatic parseEventName(eventName: string): {[key: string]: string}|null {\n    const /** @type {?} */ parts: string[] = eventName.toLowerCase().split('.');\n\n    const /** @type {?} */ domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const /** @type {?} */ key = KeyEventsPlugin._normalizeKey( /** @type {?} */((parts.pop())));\n\n    let /** @type {?} */ fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const /** @type {?} */ index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const /** @type {?} */ result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nstatic getEventFullKey(event: KeyboardEvent): string {\n    let /** @type {?} */ fullKey = '';\n    let /** @type {?} */ key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n/**\n * @param {?} fullKey\n * @param {?} handler\n * @param {?} zone\n * @return {?}\n */\nstatic eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n/**\n * \\@internal\n * @param {?} keyName\n * @return {?}\n */\nstatic _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction KeyEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nKeyEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n/**\n * A DI token that you can use to provide{\\@link HammerGestureConfig} to Angular. Use it to configure\n * Hammer gestures.\n * \n * \\@experimental\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n}\n/**\n * \\@experimental\n */\nexport class HammerGestureConfig {\n  events: string[] = [];\n\n  overrides: {[key: string]: Object} = {};\n/**\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new Hammer(element);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const /** @type {?} */ eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HammerGestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGestureConfig.ctorParameters;\n/** @type {?} */\nHammerGestureConfig.prototype.events;\n/** @type {?} */\nHammerGestureConfig.prototype.overrides;\n}\n\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n * @param {?} _config\n */\nconstructor(\n       doc: any,\nprivate _config: HammerGestureConfig) {\n    super(doc);\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!( /** @type {?} */((window as any))).Hammer) {\n      throw new Error(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const /** @type {?} */ mc = this._config.buildHammer(element);\n      const /** @type {?} */ callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => mc.off(eventName, callback);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nisCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n{type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG, ] }, ]},\n];\n}\n\nfunction HammerGesturesPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGesturesPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGesturesPlugin.ctorParameters;\n/** @type {?} */\nHammerGesturesPlugin.prototype._config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const /** @type {?} */ NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst /** @type {?} */ COMPONENT_REGEX = /%COMP%/g;\nexport const /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';\nexport const /** @type {?} */ HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const /** @type {?} */ CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} compId\n * @param {?} styles\n * @param {?} target\n * @return {?}\n */\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let /** @type {?} */ i = 0; i < styles.length; i++) {\n    let /** @type {?} */ style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n/**\n * @param {?} eventHandler\n * @return {?}\n */\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  return (event: any) => {\n    const /** @type {?} */ allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n  };\n}\nexport class DomRendererFactory2 implements RendererFactory2 {\nprivate rendererByCompId = new Map<string, Renderer2>();\nprivate defaultRenderer: Renderer2;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n */\nconstructor(private eventManager: EventManager,\nprivate sharedStylesHost: DomSharedStylesHost) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  };\n/**\n * @param {?} element\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let /** @type {?} */ renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer =\n              new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        ( /** @type {?} */((<EmulatedEncapsulationDomRenderer2>renderer))).applyToHost(element);\n        return renderer;\n      }\n      case ViewEncapsulation.Native:\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EventManager, },\n{type: DomSharedStylesHost, },\n];\n}\n\nfunction DomRendererFactory2_tsickle_Closure_declarations() {\n/** @type {?} */\nDomRendererFactory2.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomRendererFactory2.ctorParameters;\n/** @type {?} */\nDomRendererFactory2.prototype.rendererByCompId;\n/** @type {?} */\nDomRendererFactory2.prototype.defaultRenderer;\n/** @type {?} */\nDomRendererFactory2.prototype.eventManager;\n/** @type {?} */\nDomRendererFactory2.prototype.sharedStylesHost;\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n/**\n * @param {?} eventManager\n */\nconstructor(private eventManager: EventManager) {}\n/**\n * @return {?}\n */\ndestroy(): void {}\n\n  destroyNode: null;\n/**\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string): any {\n    if (namespace) {\n      return document.createElementNS(NAMESPACE_URIS[namespace], name);\n    }\n\n    return document.createElement(name);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string): any { return document.createComment(value); }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string): any { return document.createTextNode(value); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void { parent.appendChild(newChild); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any): any {\n    let /** @type {?} */ el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    el.textContent = '';\n    return el;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any { return node.parentNode; }\n/**\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any): any { return node.nextSibling; }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = `${namespace}:${name}`;\n      const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string): void { el.classList.add(name); }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string): void { el.classList.remove(name); }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.setProperty(\n          style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any): void {\n    checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n/**\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string): void { node.nodeValue = value; }\n/**\n * @param {?} target\n * @param {?} event\n * @param {?} callback\n * @return {?}\n */\nlisten(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return /** @type {?} */(( <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback))));\n    }\n    return /** @type {?} */(( /** @type {?} */(( <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)))) as() => void));\n  }\n}\n\nfunction DefaultDomRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultDomRenderer2.prototype.data;\n/** @type {?} */\nDefaultDomRenderer2.prototype.destroyNode;\n/** @type {?} */\nDefaultDomRenderer2.prototype.eventManager;\n}\n\n\nconst /** @type {?} */ AT_CHARCODE = '@'.charCodeAt(0);\n/**\n * @param {?} name\n * @param {?} nameKind\n * @return {?}\n */\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(\n        `Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\nprivate contentAttr: string;\nprivate hostAttr: string;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n * @param {?} component\n */\nconstructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\nprivate component: RendererType2) {\n    super(eventManager);\n    const styles = flattenStyles(component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(component.id);\n    this.hostAttr = shimHostAttribute(component.id);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\napplyToHost(element: any) { super.setAttribute(element, this.hostAttr, ''); }\n/**\n * @param {?} parent\n * @param {?} name\n * @return {?}\n */\ncreateElement(parent: any, name: string): Element {\n    const /** @type {?} */ el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nfunction EmulatedEncapsulationDomRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.contentAttr;\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.hostAttr;\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.component;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\nprivate shadowRoot: any;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n * @param {?} hostEl\n * @param {?} component\n */\nconstructor(\n      eventManager: EventManager,\nprivate sharedStylesHost: DomSharedStylesHost,\nprivate hostEl: any,\nprivate component: RendererType2) {\n    super(eventManager);\n    this.shadowRoot = (hostEl as any).createShadowRoot();\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate nodeOrShadowRoot(node: any): any { return node === this.hostEl ? this.shadowRoot : node; }\n/**\n * @return {?}\n */\ndestroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n\nfunction ShadowDomRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nShadowDomRenderer.prototype.shadowRoot;\n/** @type {?} */\nShadowDomRenderer.prototype.sharedStylesHost;\n/** @type {?} */\nShadowDomRenderer.prototype.hostEl;\n/** @type {?} */\nShadowDomRenderer.prototype.component;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\nexport class DomEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n */\nconstructor( doc: any) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return true; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, /** @type {?} */(( handler as any)), false);\n    return () => element.removeEventListener(eventName, /** @type {?} */(( handler as any)), false);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nDomEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport * as core from '@angular/core';\nimport {getDOM} from '../dom_adapter';\n\nconst /** @type {?} */ CORE_TOKENS = {\n  'ApplicationRef': core.ApplicationRef,\n  'NgZone': core.NgZone,\n};\n\nconst /** @type {?} */ INSPECT_GLOBAL_NAME = 'ng.probe';\nconst /** @type {?} */ CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nexport function inspectNativeElement(element: any): core.DebugNode|null {\n  return core.getDebugNode(element);\n}\n/**\n * Deprecated. Use the one from '\\@angular/core'.\n * @deprecated\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * @param {?} extraTokens\n * @param {?} coreTokens\n * @return {?}\n */\nexport function _createNgProbe(extraTokens: NgProbeToken[], coreTokens: core.NgProbeToken[]): any {\n  const /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);\n  getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n  getDOM().setGlobalVar(\n      CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(tokens || [])});\n  return () => inspectNativeElement;\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens: NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const /** @type {?} */ ELEMENT_PROBE_PROVIDERS: core.Provider[] = [\n  {\n    provide: core.APP_INITIALIZER,\n    useFactory: _createNgProbe,\n    deps: [\n      [NgProbeToken, new core.Optional()],\n      [core.NgProbeToken, new core.Optional()],\n    ],\n    multi: true,\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n/**\n * \\@stable\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n/**\n * \\@stable\n */\nexport class EventManager {\nprivate _plugins: EventManagerPlugin[];\nprivate _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n/**\n * @param {?} plugins\n * @param {?} _zone\n */\nconstructor( plugins: EventManagerPlugin[],\nprivate _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n/**\n * @return {?}\n */\ngetZone(): NgZone { return this._zone; }\n/**\n * \\@internal\n * @param {?} eventName\n * @return {?}\n */\n_findPluginFor(eventName: string): EventManagerPlugin {\n    const /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const /** @type {?} */ plugins = this._plugins;\n    for (let /** @type {?} */ i = 0; i < plugins.length; i++) {\n      const /** @type {?} */ plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS, ] }, ]},\n{type: NgZone, },\n];\n}\n\nfunction EventManager_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEventManager.ctorParameters;\n/** @type {?} */\nEventManager.prototype._plugins;\n/** @type {?} */\nEventManager.prototype._eventNameToPlugin;\n/** @type {?} */\nEventManager.prototype._zone;\n}\n\n/**\n * @abstract\n */\nexport abstract class EventManagerPlugin {\n/**\n * @param {?} _doc\n */\nconstructor(private _doc: any) {}\n\n  manager: EventManager;\n/**\n * @abstract\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function) {}\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  };\n}\n\nfunction EventManagerPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManagerPlugin.prototype.manager;\n/** @type {?} */\nEventManagerPlugin.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {getDOM} from './dom_adapter';\nimport {DOCUMENT} from './dom_tokens';\nexport class SharedStylesHost {\n/**\n * \\@internal\n */\nprotected _stylesSet = new Set<string>();\n/**\n * @param {?} styles\n * @return {?}\n */\naddStyles(styles: string[]): void {\n    const /** @type {?} */ additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n/**\n * @param {?} additions\n * @return {?}\n */\nonStylesAdded(additions: Set<string>): void {}\n/**\n * @return {?}\n */\ngetAllStyles(): string[] { return Array.from(this._stylesSet); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SharedStylesHost_tsickle_Closure_declarations() {\n/** @type {?} */\nSharedStylesHost.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharedStylesHost.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nSharedStylesHost.prototype._stylesSet;\n}\n\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\nprivate _hostNodes = new Set<Node>();\nprivate _styleNodes = new Set<Node>();\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n/**\n * @param {?} styles\n * @param {?} host\n * @return {?}\n */\nprivate _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const /** @type {?} */ styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n/**\n * @param {?} hostNode\n * @return {?}\n */\naddHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n/**\n * @param {?} hostNode\n * @return {?}\n */\nremoveHost(hostNode: Node): void { this._hostNodes.delete(hostNode); }\n/**\n * @param {?} additions\n * @return {?}\n */\nonStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSharedStylesHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSharedStylesHost.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSharedStylesHost.ctorParameters;\n/** @type {?} */\nDomSharedStylesHost.prototype._hostNodes;\n/** @type {?} */\nDomSharedStylesHost.prototype._styleNodes;\n/** @type {?} */\nDomSharedStylesHost.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {APP_INITIALIZER, Inject, InjectionToken, Provider} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const /** @type {?} */ TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @return {?}\n */\nexport function bootstrapListenerFactory(transitionId: string, document: any) {\n  const /** @type {?} */ factory = () => {\n    const /** @type {?} */ dom = getDOM();\n    const /** @type {?} */ styles: any[] =\n        Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n    styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n        .forEach(el => dom.remove(el));\n  };\n  return factory;\n}\n\nexport const /** @type {?} */ SERVER_TRANSITION_PROVIDERS: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: bootstrapListenerFactory,\n    deps: [TRANSITION_ID, DOCUMENT],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, ɵglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nexport class BrowserGetTestability implements GetTestability {\n/**\n * @return {?}\n */\nstatic init() { setTestabilityGetter(new BrowserGetTestability()); }\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const /** @type {?} */ whenAllStable = (callback: any /** TODO #9100 */) => {\n      const /** @type {?} */ testabilities = global['getAllAngularTestabilities']();\n      let /** @type {?} */ count = testabilities.length;\n      let /** @type {?} */ didWork = false;\n      const /** @type {?} */ decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const /** @type {?} */ t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n/**\n * A service that can be used to get and set the title of a current HTML document.\n * \n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n * \n * \\@experimental\n */\nexport class Title {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {}\n/**\n * Get the title of the current HTML document.\n * @return {?}\n */\ngetTitle(): string { return getDOM().getTitle(this._doc); }\n/**\n * Set the title of the current HTML document.\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(newTitle: string) { getDOM().setTitle(this._doc, newTitle); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Title_tsickle_Closure_declarations() {\n/** @type {?} */\nTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitle.ctorParameters;\n/** @type {?} */\nTitle.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n/**\n * A service that can be used to get and add meta tags.\n * \n * \\@experimental\n */\nexport class Meta {\nprivate _dom: DomAdapter;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { this._dom = getDOM(); }\n/**\n * @param {?} tag\n * @param {?=} forceCreation\n * @return {?}\n */\naddTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n/**\n * @param {?} tags\n * @param {?=} forceCreation\n * @return {?}\n */\naddTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n/**\n * @param {?} tag\n * @param {?=} selector\n * @return {?}\n */\nupdateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const /** @type {?} */ meta: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\nremoveTag(attrSelector: string): void { this.removeTagElement( /** @type {?} */((this.getTag(attrSelector)))); }\n/**\n * @param {?} meta\n * @return {?}\n */\nremoveTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n/**\n * @param {?} meta\n * @param {?=} forceCreation\n * @return {?}\n */\nprivate _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const /** @type {?} */ selector: string = this._parseSelector(meta);\n      const /** @type {?} */ elem: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const /** @type {?} */ element: HTMLMetaElement = /** @type {?} */(( this._dom.createElement('meta') as HTMLMetaElement));\n    this._setMetaElementAttributes(meta, element);\n    const /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n/**\n * @param {?} tag\n * @param {?} el\n * @return {?}\n */\nprivate _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\nprivate _parseSelector(tag: MetaDefinition): string {\n    const /** @type {?} */ attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n/**\n * @param {?} tag\n * @param {?} elem\n * @return {?}\n */\nprivate _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Meta_tsickle_Closure_declarations() {\n/** @type {?} */\nMeta.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMeta.ctorParameters;\n/** @type {?} */\nMeta.prototype._dom;\n/** @type {?} */\nMeta.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ɵglobal as global} from '@angular/core';\nimport {setRootDomAdapter} from '../dom/dom_adapter';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst /** @type {?} */ _attrToPropMap = {\n  'class': 'className',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex',\n};\n\nconst /** @type {?} */ DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst /** @type {?} */ _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst /** @type {?} */ _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\nlet /** @type {?} */ nodeContains: (a: any, b: any) => boolean;\n\nif (global['Node']) {\n  nodeContains = global['Node'].prototype.contains || function(node) {\n    return !!(this.compareDocumentPosition(node) & 16);\n  };\n}\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n/**\n * @param {?} templateHtml\n * @return {?}\n */\nparse(templateHtml: string) { throw new Error('parse not implemented'); }\n/**\n * @return {?}\n */\nstatic makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nhasProperty(element: Node, name: string): boolean { return name in element; }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: Node, name: string, value: any) { ( /** @type {?} */((<any>el)))[name] = value; }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\ngetProperty(el: Node, name: string): any { return ( /** @type {?} */((<any>el)))[name]; }\n/**\n * @param {?} el\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvoke(el: Node, methodName: string, args: any[]): any { ( /** @type {?} */((<any>el)))[methodName](...args); }\n/**\n * @param {?} error\n * @return {?}\n */\nlogError(error: string): void {\n    if (window.console) {\n      if (console.error) {\n        console.error(error);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nlog(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nlogGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n/**\n * @return {?}\n */\nlogGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n/**\n * @return {?}\n */\nget attrToPropMap(): any { return _attrToPropMap; }\n/**\n * @param {?} nodeA\n * @param {?} nodeB\n * @return {?}\n */\ncontains(nodeA: any, nodeB: any): boolean { return nodeContains.call(nodeA, nodeB); }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelector(el: Element, selector: string): any { return el.querySelector(selector); }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelectorAll(el: any, selector: string): any[] { return el.querySelectorAll(selector); }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\non(el: Node, evt: any, listener: any) { el.addEventListener(evt, listener, false); }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\nonAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => { el.removeEventListener(evt, listener, false); };\n  }\n/**\n * @param {?} el\n * @param {?} evt\n * @return {?}\n */\ndispatchEvent(el: Node, evt: any) { el.dispatchEvent(evt); }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateMouseEvent(eventType: string): MouseEvent {\n    const /** @type {?} */ evt: MouseEvent = document.createEvent('MouseEvent');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateEvent(eventType: any): Event {\n    const /** @type {?} */ evt: Event = document.createEvent('Event');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\npreventDefault(evt: Event) {\n    evt.preventDefault();\n    evt.returnValue = false;\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\nisPrevented(evt: Event): boolean {\n    return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetInnerHTML(el: HTMLElement): string { return el.innerHTML; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetTemplateContent(el: Node): Node|null {\n    return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetOuterHTML(el: HTMLElement): string { return el.outerHTML; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeName(node: Node): string { return node.nodeName; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeValue(node: Node): string|null { return node.nodeValue; }\n/**\n * @param {?} node\n * @return {?}\n */\ntype(node: HTMLInputElement): string { return node.type; }\n/**\n * @param {?} node\n * @return {?}\n */\ncontent(node: Node): Node {\n    if (this.hasProperty(node, 'content')) {\n      return ( /** @type {?} */((<any>node))).content;\n    } else {\n      return node;\n    }\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nfirstChild(el: Node): Node|null { return el.firstChild; }\n/**\n * @param {?} el\n * @return {?}\n */\nnextSibling(el: Node): Node|null { return el.nextSibling; }\n/**\n * @param {?} el\n * @return {?}\n */\nparentElement(el: Node): Node|null { return el.parentNode; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodes(el: any): Node[] { return el.childNodes; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodesAsList(el: Node): any[] {\n    const /** @type {?} */ childNodes = el.childNodes;\n    const /** @type {?} */ res = new Array(childNodes.length);\n    for (let /** @type {?} */ i = 0; i < childNodes.length; i++) {\n      res[i] = childNodes[i];\n    }\n    return res;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nclearNodes(el: Node) {\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nappendChild(el: Node, node: Node) { el.appendChild(node); }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nremoveChild(el: Node, node: Node) { el.removeChild(node); }\n/**\n * @param {?} el\n * @param {?} newChild\n * @param {?} oldChild\n * @return {?}\n */\nreplaceChild(el: Node, newChild: Node, oldChild: Node) { el.replaceChild(newChild, oldChild); }\n/**\n * @param {?} node\n * @return {?}\n */\nremove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertBefore(parent: Node, ref: Node, node: Node) { parent.insertBefore(node, ref); }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} nodes\n * @return {?}\n */\ninsertAllBefore(parent: Node, ref: Node, nodes: Node[]) {\n    nodes.forEach((n: any) => parent.insertBefore(n, ref));\n  }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertAfter(parent: Node, ref: Node, node: any) { parent.insertBefore(node, ref.nextSibling); }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetInnerHTML(el: Element, value: string) { el.innerHTML = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetText(el: Node): string|null { return el.textContent; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetText(el: Node, value: string) { el.textContent = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetValue(el: any): string { return el.value; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetValue(el: any, value: string) { el.value = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetChecked(el: any): boolean { return el.checked; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetChecked(el: any, value: boolean) { el.checked = value; }\n/**\n * @param {?} text\n * @return {?}\n */\ncreateComment(text: string): Comment { return document.createComment(text); }\n/**\n * @param {?} html\n * @return {?}\n */\ncreateTemplate(html: any): HTMLElement {\n    const /** @type {?} */ t = document.createElement('template');\n    t.innerHTML = html;\n    return t;\n  }\n/**\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElement(tagName: string, doc = document): HTMLElement { return doc.createElement(tagName); }\n/**\n * @param {?} ns\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElementNS(ns: string, tagName: string, doc = document): Element {\n    return doc.createElementNS(ns, tagName);\n  }\n/**\n * @param {?} text\n * @param {?=} doc\n * @return {?}\n */\ncreateTextNode(text: string, doc = document): Text { return doc.createTextNode(text); }\n/**\n * @param {?} attrName\n * @param {?} attrValue\n * @param {?=} doc\n * @return {?}\n */\ncreateScriptTag(attrName: string, attrValue: string, doc = document): HTMLScriptElement {\n    const /** @type {?} */ el = /** @type {?} */(( <HTMLScriptElement>doc.createElement('SCRIPT')));\n    el.setAttribute(attrName, attrValue);\n    return el;\n  }\n/**\n * @param {?} css\n * @param {?=} doc\n * @return {?}\n */\ncreateStyleElement(css: string, doc = document): HTMLStyleElement {\n    const /** @type {?} */ style = /** @type {?} */(( <HTMLStyleElement>doc.createElement('style')));\n    this.appendChild(style, this.createTextNode(css));\n    return style;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ncreateShadowRoot(el: HTMLElement): DocumentFragment { return ( /** @type {?} */((<any>el))).createShadowRoot(); }\n/**\n * @param {?} el\n * @return {?}\n */\ngetShadowRoot(el: HTMLElement): DocumentFragment { return ( /** @type {?} */((<any>el))).shadowRoot; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetHost(el: HTMLElement): HTMLElement { return ( /** @type {?} */((<any>el))).host; }\n/**\n * @param {?} node\n * @return {?}\n */\nclone(node: Node): Node { return node.cloneNode(true); }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByClassName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByClassName(name);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByTagName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByTagName(name);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nclassList(element: any): any[] { return Array.prototype.slice.call(element.classList, 0); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\naddClass(element: any, className: string) { element.classList.add(className); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nremoveClass(element: any, className: string) { element.classList.remove(className); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nhasClass(element: any, className: string): boolean {\n    return element.classList.contains(className);\n  }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetStyle(element: any, styleName: string, styleValue: string) {\n    element.style[styleName] = styleValue;\n  }\n/**\n * @param {?} element\n * @param {?} stylename\n * @return {?}\n */\nremoveStyle(element: any, stylename: string) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    element.style[stylename] = '';\n  }\n/**\n * @param {?} element\n * @param {?} stylename\n * @return {?}\n */\ngetStyle(element: any, stylename: string): string { return element.style[stylename]; }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?=} styleValue\n * @return {?}\n */\nhasStyle(element: any, styleName: string, styleValue?: string|null): boolean {\n    const /** @type {?} */ value = this.getStyle(element, styleName) || '';\n    return styleValue ? value == styleValue : value.length > 0;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\ntagName(element: any): string { return element.tagName; }\n/**\n * @param {?} element\n * @return {?}\n */\nattributeMap(element: any): Map<string, string> {\n    const /** @type {?} */ res = new Map<string, string>();\n    const /** @type {?} */ elAttrs = element.attributes;\n    for (let /** @type {?} */ i = 0; i < elAttrs.length; i++) {\n      const /** @type {?} */ attrib = elAttrs[i];\n      res.set(attrib.name, attrib.value);\n    }\n    return res;\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nhasAttribute(element: Element, attribute: string): boolean {\n    return element.hasAttribute(attribute);\n  }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nhasAttributeNS(element: Element, ns: string, attribute: string): boolean {\n    return element.hasAttributeNS(ns, attribute);\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\ngetAttribute(element: Element, attribute: string): string|null {\n    return element.getAttribute(attribute);\n  }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @return {?}\n */\ngetAttributeNS(element: Element, ns: string, name: string): string {\n    return element.getAttributeNS(ns, name);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttribute(element: Element, name: string, value: string) { element.setAttribute(name, value); }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttributeNS(element: Element, ns: string, name: string, value: string) {\n    element.setAttributeNS(ns, name, value);\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nremoveAttribute(element: Element, attribute: string) { element.removeAttribute(attribute); }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @return {?}\n */\nremoveAttributeNS(element: Element, ns: string, name: string) {\n    element.removeAttributeNS(ns, name);\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ntemplateAwareRoot(el: Node): any { return this.isTemplateElement(el) ? this.content(el) : el; }\n/**\n * @return {?}\n */\ncreateHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetBoundingClientRect(el: Element): any {\n    try {\n      return el.getBoundingClientRect();\n    } catch ( /** @type {?} */e) {\n      return {top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0};\n    }\n  }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetTitle(doc: Document): string { return document.title; }\n/**\n * @param {?} doc\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(doc: Document, newTitle: string) { document.title = newTitle || ''; }\n/**\n * @param {?} n\n * @param {?} selector\n * @return {?}\n */\nelementMatches(n: any, selector: string): boolean {\n    if (n instanceof HTMLElement) {\n      return n.matches && n.matches(selector) ||\n          n.msMatchesSelector && n.msMatchesSelector(selector) ||\n          n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n\n    return false;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nisTemplateElement(el: Node): boolean {\n    return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nisTextNode(node: Node): boolean { return node.nodeType === Node.TEXT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nisCommentNode(node: Node): boolean { return node.nodeType === Node.COMMENT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nisElementNode(node: Node): boolean { return node.nodeType === Node.ELEMENT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nhasShadowRoot(node: any): boolean {\n    return node.shadowRoot != null && node instanceof HTMLElement;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nisShadowRoot(node: any): boolean { return node instanceof DocumentFragment; }\n/**\n * @param {?} node\n * @return {?}\n */\nimportIntoDoc(node: Node): any { return document.importNode(this.templateAwareRoot(node), true); }\n/**\n * @param {?} node\n * @return {?}\n */\nadoptNode(node: Node): any { return document.adoptNode(node); }\n/**\n * @param {?} el\n * @return {?}\n */\ngetHref(el: Element): string { return ( /** @type {?} */((<any>el))).href; }\n/**\n * @param {?} event\n * @return {?}\n */\ngetEventKey(event: any): string {\n    let /** @type {?} */ key = event.key;\n    if (key == null) {\n      key = event.keyIdentifier;\n      // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n      // Safari cf\n      // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n      if (key == null) {\n        return 'Unidentified';\n      }\n      if (key.startsWith('U+')) {\n        key = String.fromCharCode(parseInt(key.substring(2), 16));\n        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n          // There is a bug in Chrome for numeric keypad keys:\n          // https://code.google.com/p/chromium/issues/detail?id=155654\n          // 1, 2, 3 ... are reported as A, B, C ...\n          key = ( /** @type {?} */((_chromeNumKeyPadMap as any)))[key];\n        }\n      }\n    }\n\n    return _keyMap[key] || key;\n  }\n/**\n * @param {?} doc\n * @param {?} target\n * @return {?}\n */\ngetGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return document;\n    }\n    if (target === 'body') {\n      return document.body;\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\ngetHistory(): History { return window.history; }\n/**\n * @return {?}\n */\ngetLocation(): Location { return window.location; }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetBaseHref(doc: Document): string|null {\n    const /** @type {?} */ href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n/**\n * @return {?}\n */\nresetBaseElement(): void { baseElement = null; }\n/**\n * @return {?}\n */\ngetUserAgent(): string { return window.navigator.userAgent; }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetData(element: Element, name: string, value: string) {\n    this.setAttribute(element, 'data-' + name, value);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetData(element: Element, name: string): string|null {\n    return this.getAttribute(element, 'data-' + name);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\ngetComputedStyle(element: any): any { return getComputedStyle(element); }\n/**\n * @param {?} path\n * @param {?} value\n * @return {?}\n */\nsetGlobalVar(path: string, value: any) { setValueOnPath(global, path, value); }\n/**\n * @return {?}\n */\nsupportsWebAnimation(): boolean {\n    return typeof( /** @type {?} */((<any>Element))).prototype['animate'] === 'function';\n  }\n/**\n * @return {?}\n */\nperformanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // http://caniuse.com/#search=performance.now\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n/**\n * @return {?}\n */\nsupportsCookies(): boolean { return true; }\n/**\n * @param {?} name\n * @return {?}\n */\ngetCookie(name: string): string|null { return parseCookieValue(document.cookie, name); }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetCookie(name: string, value: string) {\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n    // not clear other cookies.\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n  }\n}\n\nlet /** @type {?} */ baseElement: HTMLElement|null = null;\n/**\n * @return {?}\n */\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = /** @type {?} */(( document.querySelector('base')));\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet /** @type {?} */ urlParsingNode: any;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n/**\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const /** @type {?} */ cookie of cookieStr.split(';')) {\n    const /** @type {?} */ eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n/**\n * @param {?} global\n * @param {?} path\n * @param {?} value\n * @return {?}\n */\nexport function setValueOnPath(global: any, path: string, value: any) {\n  const /** @type {?} */ parts = path.split('.');\n  let /** @type {?} */ obj: any = global;\n  while (parts.length > 1) {\n    const /** @type {?} */ name = /** @type {?} */(( parts.shift()));\n    if (obj.hasOwnProperty(name) && obj[name] != null) {\n      obj = obj[name];\n    } else {\n      obj = obj[name] = {};\n    }\n  }\n  if (obj === undefined || obj === null) {\n    obj = {};\n  }\n  obj[ /** @type {?} */((parts.shift()))] = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '@angular/core';\n\nlet /** @type {?} */ _DOM: DomAdapter = /** @type {?} */(( null));\n/**\n * @return {?}\n */\nexport function getDOM() {\n  return _DOM;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n/**\n * Provides DOM operations in an environment-agnostic way.\n * \n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nexport abstract class DomAdapter {\npublic resourceLoaderType: Type<any> = /** @type {?} */(( null));\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nhasProperty(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: Element, name: string, value: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\ngetProperty(el: Element, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvoke(el: Element, methodName: string, args: any[]) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlogError(error: any) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlog(error: any) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlogGroup(error: any) {}\n/**\n * @abstract\n * @return {?}\n */\nlogGroupEnd() {}\n/**\n * Maps attribute names to their corresponding property names for cases\n * where attribute name doesn't match property name.\n * @return {?}\n */\nget attrToPropMap(): {[key: string]: string} { return this._attrToPropMap; };\n/**\n * @param {?} value\n * @return {?}\n */\nset attrToPropMap(value: {[key: string]: string}) { this._attrToPropMap = value; };\n/**\n * \\@internal\n */\n_attrToPropMap: {[key: string]: string};\n/**\n * @abstract\n * @param {?} nodeA\n * @param {?} nodeB\n * @return {?}\n */\ncontains(nodeA: any, nodeB: any) {}\n/**\n * @abstract\n * @param {?} templateHtml\n * @return {?}\n */\nparse(templateHtml: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelector(el: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelectorAll(el: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\non(el: any, evt: any, listener: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\nonAndCancel(el: any, evt: any, listener: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @return {?}\n */\ndispatchEvent(el: any, evt: any) {}\n/**\n * @abstract\n * @param {?} eventType\n * @return {?}\n */\ncreateMouseEvent(eventType: any) {}\n/**\n * @abstract\n * @param {?} eventType\n * @return {?}\n */\ncreateEvent(eventType: string) {}\n/**\n * @abstract\n * @param {?} evt\n * @return {?}\n */\npreventDefault(evt: any) {}\n/**\n * @abstract\n * @param {?} evt\n * @return {?}\n */\nisPrevented(evt: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetInnerHTML(el: any) {}\n/**\n * Returns content if el is a <template> element, null otherwise.\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetTemplateContent(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetOuterHTML(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnodeName(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnodeValue(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\ntype(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\ncontent(node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nfirstChild(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nnextSibling(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nparentElement(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nchildNodes(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nchildNodesAsList(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nclearNodes(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nappendChild(el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nremoveChild(el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} newNode\n * @param {?} oldNode\n * @return {?}\n */\nreplaceChild(el: any, newNode: any, oldNode: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nremove(el: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertBefore(parent: any, ref: any, node: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} ref\n * @param {?} nodes\n * @return {?}\n */\ninsertAllBefore(parent: any, ref: any, nodes: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\ninsertAfter(parent: any, el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetInnerHTML(el: any, value: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetText(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetText(el: any, value: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetValue(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetValue(el: any, value: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetChecked(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetChecked(el: any, value: boolean) {}\n/**\n * @abstract\n * @param {?} text\n * @return {?}\n */\ncreateComment(text: string) {}\n/**\n * @abstract\n * @param {?} html\n * @return {?}\n */\ncreateTemplate(html: any) {}\n/**\n * @abstract\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElement(tagName: any, doc?: any) {}\n/**\n * @abstract\n * @param {?} ns\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElementNS(ns: string, tagName: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} text\n * @param {?=} doc\n * @return {?}\n */\ncreateTextNode(text: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} attrName\n * @param {?} attrValue\n * @param {?=} doc\n * @return {?}\n */\ncreateScriptTag(attrName: string, attrValue: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} css\n * @param {?=} doc\n * @return {?}\n */\ncreateStyleElement(css: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ncreateShadowRoot(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetShadowRoot(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetHost(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetDistributedNodes(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nclone /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByClassName(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByTagName(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\nclassList(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\naddClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nremoveClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nhasClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetStyle(element: any, styleName: string, styleValue: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\nremoveStyle(element: any, styleName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\ngetStyle(element: any, styleName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @param {?=} styleValue\n * @return {?}\n */\nhasStyle(element: any, styleName: string, styleValue?: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ntagName(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\nattributeMap(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nhasAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nhasAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\ngetAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\ngetAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttribute(element: any, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttributeNS(element: any, ns: string, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nremoveAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nremoveAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ntemplateAwareRoot(el: any) {}\n/**\n * @abstract\n * @return {?}\n */\ncreateHtmlDocument() {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetBoundingClientRect(el: any) {}\n/**\n * @abstract\n * @param {?} doc\n * @return {?}\n */\ngetTitle(doc: Document) {}\n/**\n * @abstract\n * @param {?} doc\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(doc: Document, newTitle: string) {}\n/**\n * @abstract\n * @param {?} n\n * @param {?} selector\n * @return {?}\n */\nelementMatches(n: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nisTemplateElement(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisTextNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisCommentNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisElementNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nhasShadowRoot(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisShadowRoot(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nimportIntoDoc /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nadoptNode /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ngetHref(element: any) {}\n/**\n * @abstract\n * @param {?} event\n * @return {?}\n */\ngetEventKey(event: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} baseUrl\n * @param {?} href\n * @return {?}\n */\nresolveAndSetHref(element: any, baseUrl: string, href: string) {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsDOMEvents() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsNativeShadowDOM() {}\n/**\n * @abstract\n * @param {?} doc\n * @param {?} target\n * @return {?}\n */\ngetGlobalEventTarget(doc: Document, target: string) {}\n/**\n * @abstract\n * @return {?}\n */\ngetHistory() {}\n/**\n * @abstract\n * @return {?}\n */\ngetLocation() {}\n/**\n * @abstract\n * @param {?} doc\n * @return {?}\n */\ngetBaseHref(doc: Document) {}\n/**\n * @abstract\n * @return {?}\n */\nresetBaseElement() {}\n/**\n * @abstract\n * @return {?}\n */\ngetUserAgent() {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetData(element: any, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ngetComputedStyle(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetData(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetGlobalVar(name: string, value: any) {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsWebAnimation() {}\n/**\n * @abstract\n * @return {?}\n */\nperformanceNow() {}\n/**\n * @abstract\n * @return {?}\n */\ngetAnimationPrefix() {}\n/**\n * @abstract\n * @return {?}\n */\ngetTransitionEnd() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsAnimation() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsCookies() {}\n/**\n * @abstract\n * @param {?} name\n * @return {?}\n */\ngetCookie(name: string) {}\n/**\n * @abstract\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetCookie(name: string, value: string) {}\n}\n\nfunction DomAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nDomAdapter.prototype.resourceLoaderType;\n/**\n * \\@internal\n * @type {?}\n */\nDomAdapter.prototype._attrToPropMap;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DomAdapter} from '../dom/dom_adapter';\n/**\n * Provides DOM operations in any browser environment.\n * \n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\nprivate _animationPrefix: string|null = null;\nprivate _transitionEnd: string|null = null;\nconstructor() {\n    super();\n    try {\n      const element = this.createElement('div', document);\n      if (this.getStyle(element, 'animationName') != null) {\n        this._animationPrefix = '';\n      } else {\n        const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\n        for (let i = 0; i < domPrefixes.length; i++) {\n          if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n            break;\n          }\n        }\n      }\n\n      const transEndEventNames: {[key: string]: string} = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend'\n      };\n\n      Object.keys(transEndEventNames).forEach((key: string) => {\n        if (this.getStyle(element, key) != null) {\n          this._transitionEnd = transEndEventNames[key];\n        }\n      });\n    } catch (e) {\n      this._animationPrefix = null;\n      this._transitionEnd = null;\n    }\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetDistributedNodes(el: HTMLElement): Node[] { return ( /** @type {?} */((<any>el))).getDistributedNodes(); }\n/**\n * @param {?} el\n * @param {?} baseUrl\n * @param {?} href\n * @return {?}\n */\nresolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string) {\n    el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n  }\n/**\n * @return {?}\n */\nsupportsDOMEvents(): boolean { return true; }\n/**\n * @return {?}\n */\nsupportsNativeShadowDOM(): boolean {\n    return typeof( /** @type {?} */((<any>document.body))).createShadowRoot === 'function';\n  }\n/**\n * @return {?}\n */\ngetAnimationPrefix(): string { return this._animationPrefix ? this._animationPrefix : ''; }\n/**\n * @return {?}\n */\ngetTransitionEnd(): string { return this._transitionEnd ? this._transitionEnd : ''; }\n/**\n * @return {?}\n */\nsupportsAnimation(): boolean {\n    return this._animationPrefix != null && this._transitionEnd != null;\n  }\n}\n\nfunction GenericBrowserDomAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nGenericBrowserDomAdapter.prototype._animationPrefix;\n/** @type {?} */\nGenericBrowserDomAdapter.prototype._transitionEnd;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n */\nexport class BrowserPlatformLocation extends PlatformLocation {\nprivate _location: Location;\nprivate _history: History;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {\n    super();\n    this._init();\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_init() {\n    this._location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n/**\n * @return {?}\n */\nget location(): Location { return this._location; }\n/**\n * @return {?}\n */\ngetBaseHrefFromDOM(): string { return /** @type {?} */(( getDOM().getBaseHref(this._doc))); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n/**\n * @return {?}\n */\nget pathname(): string { return this._location.pathname; }\n/**\n * @return {?}\n */\nget search(): string { return this._location.search; }\n/**\n * @return {?}\n */\nget hash(): string { return this._location.hash; }\n/**\n * @param {?} newPath\n * @return {?}\n */\nset pathname(newPath: string) { this._location.pathname = newPath; }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this._location.hash = url;\n    }\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this._location.hash = url;\n    }\n  }\n/**\n * @return {?}\n */\nforward(): void { this._history.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._history.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction BrowserPlatformLocation_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserPlatformLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserPlatformLocation.ctorParameters;\n/** @type {?} */\nBrowserPlatformLocation.prototype._location;\n/** @type {?} */\nBrowserPlatformLocation.prototype._history;\n/** @type {?} */\nBrowserPlatformLocation.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeUrl} from './url_sanitizer';\n\n\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nconst /** @type {?} */ VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nconst /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nconst /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';\nconst /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nconst /** @type {?} */ CSS3_FNS = '(?:calc|attr)';\nconst /** @type {?} */ FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nconst /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(\n    `^(${VALUES}|` +\n        `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n        `${FN_ARGS})$`,\n    'g');\n\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nconst /** @type {?} */ URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * \n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value: string) {\n  let /** @type {?} */ outsideSingle = true;\n  let /** @type {?} */ outsideDouble = true;\n  for (let /** @type {?} */ i = 0; i < value.length; i++) {\n    const /** @type {?} */ c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function sanitizeStyle(value: string): string {\n  value = String(value).trim();  // Make sure it's actually a string.\n  if (!value) return '';\n\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  const /** @type {?} */ urlMatch = value.match(URL_RE);\n  if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n      value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value;  // Safe style values.\n  }\n\n  if (isDevMode()) {\n    getDOM().log(\n        `WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n\n  return 'unsafe';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n * \n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n * \n * \\@stable\n */\nexport const DOCUMENT = new InjectionToken<Document>('DocumentToken');\n"],"names":["AuthConfiguration","prototype","isValid","this","validateString","authorityUrl","startsWith","console","error","warn","clientId","redirectUrl","undefined","scopes","length","every","item","getWellKnownEndpointsUrl","validatedValue","errorMsg","decorators","type","Injectable","ctorParameters","OidcAuthStorage","authConfig","wellKnownEndpointsKey","getWellKnownEndpoints","isPlatformBrowser","storageValue","storage","getItem","JSON","parse","setWellKnownEndpoints","value","str","stringify","setItem","WellKnownEndpointsService","http","onWellKnownEndpointsLoaded","EventEmitter","ensureEndpoints","debug","endpoints","emit","fetchEndpoints","_this","get","subscribe","data","jsonResponse","json","parsed","WellKnownEndpoints","authorizationEndpointUri","authorization_endpoint","Http","propDecorators","Output","OidcAuthService","wellKnownEndpointsService","setupComplete","setup","config","getToken","addAuthHeaders","parseTokenFromLocation","window","location","hash","parseTokenFromHash","parseHash","substr","split","reduce","result","parts","OidcAuthModule","forRoot","ngModule","providers","forChild","NgModule","args","declarations","exports","Request","_super","requestOptions","call","url","paramsArg","params","search","URLSearchParams","toString","urlEncodeParams","prefix","indexOf","_body","body","method","normalizeMethodName","tslib_1.__extends","detectContentType","headers","ContentType","FORM","FORM_DATA","TEXT","detectContentTypeFromBody","NONE","FormData","Blob$1","BLOB","ArrayBuffer$1","ARRAY_BUFFER","getBody","contentType","text","blob","arrayBuffer","Body","w","noop","request","options","responseObservable","httpRequest","_backend","mergeOptions","_defaultOptions","RequestMethod","Get","Options","RequestOptions","Jsonp","Error","HttpModule","provide","useFactory","httpFactory","deps","XHRBackend","BrowserXhr","useClass","BaseRequestOptions","ResponseOptions","BaseResponseOptions","JsonpModule","jsonpFactory","JSONPBackend","BrowserJsonp","opts","withCredentials","responseType","set","merge","Headers","_mergeSearchParams","clone","_parseParams","objParams","Object","keys","forEach","key","Array","isArray","_appendParam","XHRConnection","req","browserXHR","baseResponseOptions","response","Observable","responseObserver","_xhr","open","toUpperCase","onLoad","responseText","status","fromResponseHeaderString","getAllResponseHeaders","getResponseURL","statusText","responseOptions","Response","ok","isSuccess","next","onError","err","ResponseType","setDetectedContentType","has","append","values","name","setRequestHeader","join","ResponseContentType","ArrayBuffer","Json","Text","Blob","addEventListener","send","removeEventListener","CookieXSRFStrategy","configureRequest","xsrfToken","ɵgetDOM","getCookie","_cookieName","createConnection","_xsrfStrategy","_browserXHR","_baseResponseOptions","JSONPConnection_","_dom","_finished","TypeError","JSONP_ERR_WRONG_METHOD","readyState","ReadyState","Loading","id","_id","nextRequestID","exposeConnection","callback","requestCallback","replace","lastIndexOf","substring","script","_script","build","event","Cancelled","Done","cleanup","responseOptions_1","JSONP_ERR_NO_CALLBACK","_responseData","complete","message","finished","removeConnection","JSONPBackend_","_browserJSONP","QueryEncoder","encodeKey","k","standardEncoding","paramsMap","paramParser","rawParams","param","val","delete","setAll","searchParams","list","appendAll","i","replaceAll","paramsList","encodingHint","String","fromCharCode","apply","Uint16Array","Uint8Array","JSONP_HOME","_jsonpConnections","node","_nextRequestId","document","appendChild","parentNode","removeChild","Post","Put","Delete","Head","Patch","Unsent","Open","HeadersReceived","Basic","Cors","Default","Opaque","_headers","Map","_normalizedNames","headersString","line","index","slice","trim","getAll","toLowerCase","from","toJSON","serialized","entries","mayBeSetNormalizedName","lcName","DATA_URL_PATTERN","DOM","VOID_ELEMENTS","tagSet","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","SanitizingHtmlSerializer","sanitizeChildren","el","current","isElementNode","startElement","isTextNode","chars","nodeValue","sanitizedSomething","firstChild","endElement","checkClobberedElement","nextSibling","element","tagName","nodeName","hasOwnProperty","buf","push","attributeMap","attrName","lower","sanitizeUrl","sanitizeSrcset","DomSanitizer","DomSanitizerImpl","__extends","sanitize","ctx","SecurityContext","HTML","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","sanitizeHtml","_doc","STYLE","SafeStyleImpl","sanitizeStyle","SCRIPT","SafeScriptImpl","URL","SafeResourceUrlImpl","SafeUrlImpl","RESOURCE_URL","expectedType","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","Inject","DOCUMENT","SafeValueImpl","getTypeName","INTERNAL_BROWSER_PLATFORM_PROVIDERS","BrowserModule","createPlatformFactory","platformCore","withServerTransition","APP_ID","useValue","appId","SERVER_TRANSITION_PROVIDERS","BROWSER_SANITIZATION_PROVIDERS","ErrorHandler","errorHandler","EVENT_MANAGER_PLUGINS","DomEventsPlugin","multi","KeyEventsPlugin","HammerGesturesPlugin","HAMMER_GESTURE_CONFIG","HammerGestureConfig","DomRendererFactory2","RendererFactory2","useExisting","SharedStylesHost","DomSharedStylesHost","Testability","EventManager","ELEMENT_PROBE_PROVIDERS","Meta","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","shift","shiftKey","doc","eventName","handler","parsedEvent","parseEventName","domEventName","_normalizeKey","pop","fullKey","modifierName","splice","getEventFullKey","getDOM","getEventKey","modifierGetter","eventCallback","zone","keyName","EVENT_NAMES","pan","panstart","panmove","panend","panleft","panright","panup","pandown","pinch","pinchstart","pinchend","pinchcancel","pinchout","press","pressup","rotatestart","rotatemove","rotateend","rotatecancel","swipeleft","swiperight","InjectionToken","buildHammer","mc","Hammer","enable","overrides","supports","isCustomEvent","manager","getZone","runOutsideAngular","_config","eventObj","runGuarded","EventManagerPlugin","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","CONTENT_ATTR","eventManager","sharedStylesHost","createRenderer","defaultRenderer","encapsulation","ViewEncapsulation","Emulated","renderer","rendererByCompId","EmulatedEncapsulationDomRenderer2","applyToHost","Native","ShadowDomRenderer","styles","flattenStyles","addStyles","DefaultDomRenderer2","create","createElement","namespace","createComment","selectRootElement","selectorOrNode","querySelector","setAttribute","namespaceUri","setAttributeNS","removeAttribute","removeAttributeNS","setStyle","style","flags","RendererStyleFlags2","DashCase","setProperty","Important","removeProperty","listen","target","checkNoSyntheticProp","addGlobalEventListener","decoratePreventDefault","component","parent","hostEl","shadowRoot","createShadowRoot","addHost","p","s","t","CORE_TOKENS","NgProbeToken$1","token","APP_INITIALIZER","_createNgProbe","Optional","plugins","_zone","_findPluginFor","plugin","_eventNameToPlugin","_plugins","plugin_1","NgZone","getGlobalEventTarget","additions","Set","_stylesSet","add","_addStylesToHost","host","removeHost","hostNode","_hostNodes","TRANSITION_ID","BrowserGetTestability","init","setTestabilityGetter","addToWindow","registry","ɵglobal","elem","findInAncestors","testability","findTestabilityInTree","global","getAllTestabilities","getAllRootElements","whenAllStable","testabilities","count","didWork","decrement","didWork_","whenStable","getTestability","isShadowRoot","Title","addTags","tags","forceCreation","tag","getTags","attrSelector","updateTag","selector","_parseSelector","meta","getTag","removeTag","removeTagElement","_containsAttributes","getAttribute","nodeContains","extendStatics","setPrototypeOf","__proto__","d","b","_DOM","DomAdapter","logGroup","templateAwareRoot","resolveAndSetHref","baseUrl","href","supportsDOMEvents","getHistory","getBaseHref","resetBaseElement","setGlobalVar","supportsWebAnimation","performanceNow","getAnimationPrefix","getTransitionEnd","supportsAnimation","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","getStyle","domPrefixes","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","_attrToPropMap","class","readonly","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","`","","urlParsingNode","BrowserDomAdapter","invoke","methodName","logError","onAndCancel","evt","listener","dispatchEvent","getInnerHTML","innerHTML","getOuterHTML","outerHTML","content","hasProperty","parentElement","childNodes","childNodesAsList","res","replaceChild","newChild","oldChild","remove","setInnerHTML","setText","textContent","setValue","setChecked","checked","getShadowRoot","getHost","elAttrs","attributes","isTemplateElement","getBoundingClientRect","elementMatches","n","HTMLElement","matches","nodeType","Node","TEXT_NODE","isCommentNode","COMMENT_NODE","ELEMENT_NODE","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","keyIdentifier","parseInt","getLocation","relativePath","path","setValueOnPath","Date","getTime","supportsCookies","setCookie","baseElement","BrowserPlatformLocation","_history","getBaseHrefFromDOM","fn","defineProperty","_location","pushState","state","title","supportsState","replaceState","PlatformLocation","defaultOpts","providedOpts","newOptions","map","eqIdx","_a","v","encodeURIComponent","_getJsonpConnections","xhr","responseURL","stringToArrayBuffer","input","view","charCodeAt","bootstrapListenerFactory","transitionId","dom","querySelectorAll","filter","extraTokens","coreTokens","tokens","prev","compId","COMPONENT_REGEX","eventHandler","preventDefault","nameKind","match","SAFE_URL_PATTERN","srcset","getInertElement","inertElement","templateEl","createHtmlDocument","html","sets","_i","arguments","sets_1","nextNode","encodeEntities","SURROGATE_PAIR_REGEXP","stripCustomNsAttrs","_","containerEl","unsafeHtml","unsafeHtmlInput","mXSSAttempts","parsedHtml","defaultDoc","documentMode","sanitizer","safeHtml","getTemplateContent","child","isDevMode","e","hasBalancedQuotes","outsideSingle","outsideDouble","c","charAt","urlMatch","URL_RE","SAFE_STYLE_VALUE","log","__","constructor","getBaseElementHref","parseCookieValue","cookieStr","cookie","eqIndex","_b","cookieName","cookieValue","obj"],"mappings":"4fmCoBA,SAAgBmW,WAAUiP,EAAGC,GAEzB,QAASwM,MAAO1xB,KAAK2xB,YAAc1M,EADnCH,cAAcG,EAAGC,GAEjBD,EAAEnlB,UAAkB,OAANolB,EAAahb,OAAO0U,OAAOsG,IAAMwM,GAAG5xB,UAAYolB,EAAEplB,UAAW,GAAI4xB,4FCm1BnF,QAAAE,sBACA,MAAAnF,eACAA,YAAAlb,SAAA2N,cAAA,+CAcA,QAAAgN,cAAAzmB,WACAojB,kBACAA,eAAAtX,SAAAsN,cAAA,0IAYA,QAAAgT,kBAAAC,UAAAxlB,MACAA,KAAAuhB,mBAAAvhB,KACA,KAAA,GAAAsjB,IAAA,EAAAjC,GAAAmE,UAAAttB,MAAA,KAAAorB,GAAAjC,GAAAhtB,OAAAivB,KAAA,CAAK,GAALmC,QAAApE,GAAAiC,IACAoC,QAAAD,OAAA9rB,QAAA,KACAgsB,IAAA,GAAAD,SAAAD,OAAA,KAAAA,OAAAlf,MAAA,EAAAmf,SAAAD,OAAAlf,MAAAmf,QAAA,IAzeSE,WAyeTD,GAAA,GAAAE,YAAAF,GAAA,EACA,IAAAC,WAAApf,SAAAxG,wDAYA,QAAA8f,gBAAAnJ,OAAAkJ,KAAAnqB,OA5eA,IA6eA,GA9eqB2C,OA8erBwnB,KAAA3nB,MAAA,KACA4tB,IAAAnP,OA9eAte,MAAAhE,OAAA,GAAA,CA+eA,GAAA2L,MAAA3H,MAAAgV,OAEAyY,KADAA,IAAA9c,eAAAhJ,OAAA,MAAA8lB,IAAA9lB,MACA8lB,IAAA9lB,MAGA8lB,IAAA9lB,oCKj6BA8lB;;;;;;;;0DV8BA,QAAA/D,0BAAAC,aAAA/c,UAQA,MAPA,YACA,GAAAgd,KAAA9T,QACAnQ,OAAAxK,UAAA+S,MAAA7B,MAAAud,IAAAC,iBAAAjd,SAAA,yBAEAkd,OAAA,SAAAla,IAAA,MAAAga,KAAA3J,aAAArQ,GAAA,mBAAA+Z,eACAlkB,QAAA,SAAAmK,IAAA,MAAAga,KAAApE,OAAA5V,yFHwBA,QAAA2M,gBAAAwN,YAAAC,8TAYA,MAAAC,QAAAnqB,OAAA,SAAAoqB,KArBwDhO,GAqBxD,MAAAgO,MAAAhO,EAAAvU,MAAAuU,EAAAG,MAAA6N,gOFnBA,QAAApQ,eAAAqQ,OAAAtQ,OAAAyB,QAZA,IAAA,GAAAvP,GAAA,EAAAA,EAAA8N,OAAA7d,OAAA+P,IAAA,CAaA,GAAA+O,OAAAjB,OAAA9N,EACMpG,OAAMC,QAAZkV,OACAhB,cAAAqQ,OAAArP,MAAAQ,SAGAR,MAAAA,MAAAhR,QAAAsgB,gBAAAD,0CAUA,QAAA1O,wBAfa4O,cAgBb,MAAA,UAAMjgB,QAEN,IADAigB,aAAAjgB,SAGAA,MAAAkgB,wCAqSA,QAAA/O,sBAAA5T,KAAA4iB,2MNtTA,QAAAtZ,aAJiBnQ,KAOf,MAFFA,KAAAqL,OAAArL,KAEAA,IAAA0pB,MAAAC,mBAAA3pB,IAAA0pB,MAAA5b,kBACA9N,8IC7DA,QAAAoQ,gBAAAwZ,2HA4BA,QAAAC,mBACE,GAAIC,aAHyB,MAAOA,aAKpC/b,KAAFiH,QAEE,IAAF+U,YAAAhc,IAAAqL,cAAA,uDAGA,IAAAhF,KAAArG,IAAAic,oBAEA,IAHoB,OAEpBF,aAAA/b,IAHmB0L,cAGnBrF,IAAA,SAF0B,CAM1B,GAAA6V,MAAAlc,IAAAqL,cAAA,OAAAhF,IACA0V,cAAA/b,IAAAqL,cAAA,OAAAhF,sFASA,QAAAnG,QAAAqQ,0FAAA,QAAAna,SAAA,IAAA,GAAA+lB,SAAAC,GAAA,EAAAA,GAAAC,UAAAlvB,OAAAivB,KAAAD,KAAAC,IAAAC,UAAAD,GAWA,KAAA,GADA7F,QACA4D,GAAA,EAAAmC,OAAAH,KAAAhC,GAAAmC,OAAAnvB,OAAAgtB,KAAA,CAAA,GAAA/M,GAAAkP,OAAAnC,GACA,KAAA,GAAAC,KAAAhN,GACAA,EAAAtL,eAAAsY,2BA2KA,QAAA3Y,uBAAA5D,KAAA0e,mDAGA,KAAA,IAAAvnB,OAAA,6DAAAgL,IAAAgW,aAAAnY,MAEA,OAAA0e,UAeA,QAAAC,gBA7B4BhuB,OA8B5B,MAAAA,OAAAyM,QAAA,KAAA,SACOA,QACGwhB,sBAAuB,SADjCd,OAKA,MAAA,MAAA,MAFAA,MAAAf,WAAA,GAEA,QADAe,MAAAf,WAAA,GACA,OAAA,OAAA,qIAeA,QAAA8B,oBAAA3b,IACEf,IAAFiC,aAAAlB,IAAAnK,QA9Ba,SA8Bb+lB,EA9BkBza,UA+BlB,cAAQA,UAAR,IAAAA,SAAAzP,QAAA,SA9B8BuN,IAA9B8L,gBAAA/K,GAAAmB,wLAgDI,GAAJ0a,aAhCuBd,kBAmCvBe,WAAAC,gBAAAxf,OAAAwf,iBAAA,GAGAC,aAAA,EACAC,WAAAH,UAEA,GAAA,CACM,GAAN,IAhCUE,aAiCA,KAAV,IAhCW/nB,OAgCX,wDAEA+nB,gBACAF,WAAAG,WACMhd,IAAN4W,aAhCuBgG,YAAaC,YAiCpCI,WAhCcC,cAmCdR,mBAAAE,aAGAI,WAAAhd,IAAA8V,aAAA8G,mBACAC,aAAAG,WAMA,KAAA,GALAG,WAhCqC,GAgCrCtc,0BACAuc,SAAAD,UAAArc,iBAAAd,IAAAqd,mBAAAT,cAAAA,aAGA9P,OAAA9M,IAAAqd,mBAAAT,cAAAA,YACAR,GAAA,EAAAjC,GAAAna,IAAAsW,iBAAAxJ,QAAAsP,GAAAjC,GAAAhtB,OAAAivB,KAAA,CAAA,GAAAkB,OAAAnD,GAAAiC,GAEApc,KAAA9B,YAAA4O,OAAAwQ,OAII,MAnCQC,eAAZA,aAAAJ,UAAA7b,iHAGU8b,SAkCV,MAAAI,QmB9UAzB,cAAA,QA4EA,QAAA0B,mBAAAjvB,OAAA,IAAA,GACmBkvB,gBAAnB,EACAC,eAAA,EAF4BzgB,EAA5B,EAAAA,EAAA1O,MAAArB,OAAA+P,IAAA,CAGA,GAAA0gB,GAAApvB,MAAAqvB,OAAA3gB,EACA,OAAA0gB,GAAAD,cACAD,eAAAA,cAEA,MAAAE,GAAAF,gHAcE,KADAlvB,MAAF8O,OAAA9O,OAAA8Q,QAEM,MAAN,EAIE,IAAFwe,UAAAtvB,MAAAmtB,MAAAoC,OACA,OAAAD,WACQ1b,YADR0b,SAAA,MAAAA,SAAA,IAEAtvB,MAAAmtB,MAAAqC,mBAAAP,kBAAAjvB,OAEAA,kClB3GAyY,SAAAgX,IAAA,0CAAAzvB,MAAA,2GC4DAugB,sBAAAC,+BAMA,MAAA,IAAAjK,eAAAA;;;;;;;AZ/CA,QAAAlS,qBAAAD,QACA,GAAA,gBAAAA,QACA,MAAAA,OACA,QAAAA,OAAA8E,eACA,IAAA,MACA,MAAA/C,eAAAC,GACA,KAAA,OACA,MAAAD,eAAAwJ,IACA,KAAA,MACA,MAJSxJ,eAITyJ,GACA,KAAA,SACA,MAAAzJ,eAAA0J,MACA,KAAA,UACA,MAAA1J,eAAAE,OACA,KAAA,OACA,MAAAF,eAAA2J,IAEA,KAAA,wHAUA,QAAAtG,gBAAAuiB,KACA,MAAA,eAAAA,KANSA,IAOTC,6GAsBA,QAAAC,qBAAAC,cACAC,MAAA,GAAAld,aAAAid,MAAAvtB,6CCtEAwtB,KAAAzd,GAAAwd,MAAAE,WAAA1d;;;;;;;;;AAcA,QAAAT,aAAAC,eAAA,KAAAA,YAAAA,UAAA,GACA,IAFkBud,KAElB,GAAAjb,IAEA,IAAAtC,UAAAvP,OAAA,EAAA,CACAuP,UAAA1L,MAAA,KACS4F,QAFM,SAEf+F,OACA,GAAAud,OAAAvd,MAAAlK,QAAA,KACA0nB,IAAA,GAAAD,OAAAvd,MAAA,KAAAA,MAAA0C,MAAA,EAAA6a,OAAAvd,MAAA0C,MAAA6a,MAAA,IAAArjB,IAAAsjB,GAAA,GAAAvd,IAAAud,GAAA,GACAnd,KAAAid,IAAA3qB,IAAAuH,QACAmG,MAAAgF,KAAApF,oCA0BA,QAAAL,kBAbwB6d,GAcxB,MAAAC,oBAb4BD,GAcrBnf,QAbQ,QAAS,KAcjBA,QAbQ,QAAS,KAcjBA,QAbQ,QAAS,KAcjBA,QAbQ,QAAS,KAcxBA,QAAA,QAAA,yFGlCA,QAAAqf,wBACA,GAAApmB,GAAA,gBAAAxD,QAAAA,gBACA,QAAAkN,0EVsMA,QAAArL,iBA9CaJ,QA+Cb,GAAA4K,cAAA,GAAA1K,gBAUA,OAxDAqE,QAAAC,KAAAxE,QAAAyE,QAAA,SAAAC,KA+CA,GA9CoBrI,OA8CpB2D,OAAA0E,IACArI,QAAAsI,MAAAC,QAAAvI,OACAA,MAAAoI,QAAA,SAAA+K,SAAA,MAAA5E,cAAAnE,OAAA/B,IAAA8K,QAAArP,cAIAyK,aAAAnE,OAAA/B,IAAArI,MAAA8D,cAGAyK;;;;;;;wFClMA,QAAAtI,cAAAqlB,YAAAC,aAXqCnnB,OAWrCX,KACA,GAAA+nB,YAX+BF,WAY/B,OAAAC,cAEAC,WAAA5jB,MAXe,GAWftB,iBACMlC,OAANmnB,aAAAnnB,QAAAA,OACMX,IAAN8nB,aAAA9nB,KAAAA,IACMG,OAAN2nB,aAAA3nB,OACAD,OAAA4nB,aAAA5nB,OACAa,QAAA+mB,aAAA/mB,QATSL,KAWTonB,aAAApnB,KACAsD,gBAAA8jB,aAAA9jB;;;;;;;sQ6BnCA,GCsDAob,cDtDIC,cAAgB5a,OAAO6a,iBACpBC,uBAA2B1a,QAAS,SAAU2a,EAAGC,GAAKD,EAAED,UAAYE,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIvE,KAAKuE,GAAOA,EAAE5P,eAAeqL,KAAIsE,EAAEtE,GAAKuE,EAAEvE,yLEFvEwE,KAAF,qZA+EAC,WAAAtlB,UAAAulB,SAAA,SAAAhlB,qkIAqfA+kB,WAAAtlB,UAAAwlB,kBAAA,SAtdY/Q,mxBAyjBZ6Q,WAAAtlB,UAAAylB,kBAAA,SAAApQ,QAAAqQ,QAAAC,QAKAL,WAAAtlB,UAAA4lB,kBAAA,uEAYAN,WAAAtlB,UAAA8hB,qBAAA,SAAA/H,IAAAoG,UAKAmF,WAAAtlB,UAAA6lB,WAAA,2DAWAP,WAAAtlB,UAAA8lB,YAAA,SAAA/L,OAKAuL,WAAAtlB,UAAA+lB,iBAAA,wOAiCAT,WAAAtlB,UAAAgmB,aAAA,SAAAxZ,KAAAtK,SAKAojB,WAAAtlB,UAAAimB,qBAAA,aAKAX,WAAAtlB,UAAAkmB,eAAA,aAKAZ,WAAAtlB,UAAAmmB,mBAAA,aAKAb,WAAAtlB,UAAAomB,iBAAA,aAKAd,WAAAtlB,UAAAqmB,kBAAA,mLCjwBAC,yBAAA,SAAA9gB,QACA,QAAA8gB,4BAAA,GAAAvjB,OACAyC,OADAE,KAAAxF,OAAAA,IAEA6C,OAAAwjB,iBAAA,KACAxjB,MAAOyjB,eAAP,IAAA,KACA,GAAAC,WAAA1jB,MAAyBgc,cAAc,MAAOtN,SAE9C,IAAmD,MAA3C1O,MAAK2jB,SAASD,UAAtB,iBACA1jB,MAAAwjB,iBAAA,OAIA,KAAA,GADAI,cAAA,SAAA,MAAA,IAAA,MACA/V,EAAA,EAAAA,EAAA+V,YAAA9lB,OAAA+P,IACA,GAAA,MAAA7N,MAAA2jB,SAAAD,UAAAE,YAAA/V,GAAA,iBAAA,CAEA7N,MAAAwjB,iBAAA,IAAAI,YAAA/V,GAAAsC,cAAA,GACA,OAIA,GAAA0T,uBAEAC,iBAAA,sBACQC,cAAR,gBACAC,YAAA,gCACAC,WAAA,gBAEA5c,QAAAC,KAAAuc,sBAAAtc,QAAA,SAAAC,KAAA,MAAAxH,MAAA2jB,SAAAD,UAAAlc,OACAxH,MAAAyjB,eAAAI,qBAAArc,0FA5BA2L,aAAAoQ,yBAAA9gB,4LAiDAiP,GAAAkR,KAXiC,MAWjCA,KAXwCD,QAWxCA,QAAA,OAAAC,MAKAW,yBAAAtmB,UAAA4lB,kBAAA,WAAA,OAdgC,yEAmBhC,MAAA,kBAAAnU,UAAA,KAAAkP,0IASA2F,yBAAAtmB,UAAAomB,iBAAA,WAAA,MAAAlmB,MAAAsmB,eAAAtmB,KAAAsmB,eAvBwE,IFnExEF,yBAAAtmB,UAAAqmB,kBAAA,oGEsBAf,YFHA2B,gBAEAC,MAAA,kCAGAC,SADuC,gCAMvCC,SAGEC,KAAF,YACEC,KAAM,MACNC,IAAF,SACEC,IAAF,SACEC,IAAF,SACEC,IAAF,SACEC,KAAQ,YACRC,MAAF,aACAC,GAAA,kEAKAC,IAAA,MAKAC,qBACEC,EADK,IAELC,EADK,IAELC,EADK,IAELC,EADK,IAELC,EADK,IAELC,EADK,IAELC,EADK,IAELC,EADK,IAELC,EADK,IAELC,EAAF,IACEC,EAAF,IACAC,EAAA,IACIC,EACJ,IAEIzF,EAAJ,IACE0F,IAAF,IACAC,IAAA,UAGAhG,eAAAA,QAAA,mIAKA,IAyyBAiG,gBAzyBAC,kBAAA,SAAAxjB,QAAA,QAAAwjB,8EAyxBA,MAtxBsC9S,aAAtC8S,kBAAAxjB,gbAgCAwjB,kBAAAhpB,UAAAipB,OAAA,SAAAxU,GAAAyU,WAAA9jB,MAAA,GAAA8jB,YAAAhY,MAAA,GAAA9L,OApBA4jB,kBAAAhpB,UAAAmpB,SAAA,SAAA5oB,OAyBA6D,OAAA9D,UACAA,QAAAC,MACAD,QAAAC,MAAAA,g5BAoEAyoB,kBAAAhpB,UAAAopB,YAAA,SAAA3U,GAAA4U,IAAAC,2GAWAN,kBAAAhpB,UAAAupB,cAAA,SAAA9U,GAAA4U,KAAA5U,GAAA8U,cAAAF,wgBAsCAL,kBAAAhpB,UAAAwpB,aAAA,SAAA/U,IAzFG,MAyFHA,IAAAgV,gJAYAT,kBAAAhpB,UAAA0pB,aAAA,SAjGGjV,IAiGH,MAAAA,IAjG6CkV,WAsG7CX,kBAAAhpB,UAAAuV,SAAA,SArGGhE,MAqGH,MAAAA,MArG8CgE,UA0G9CyT,kBAAAhpB,UAAA+U,UAAA,SAAAxD,MAAA,MAzGqDA,MAAKwD,WA8G1DiU,kBAAAhpB,UAAAoB,KAAA,SAAAmQ,MAAA,MAAAA,MAAAnQ,MAIA4nB,kBAAAhpB,UAAA4pB,QAAA,SAAMrY,MACN,MAAArR,MAAA2pB,YAAAtY,KAAA,WACA,KAAAqY,cAUAZ,kBAAAhpB,UAAAiV,WAAA,SArHGR,IAqHH,MAAAA,IArH4CQ,YA0H5C+T,kBAAAhpB,UAAAoV,YAAA,SAAAX,IAAA,MAAAA,IAAAW,aAKA4T,kBAAAhpB,UAAA8pB,cAAA,SAAArV,IAAA,MA7H0CA,IA6H1C9C,YAKAqX,kBAAAhpB,UAAA+pB,WAAA,SAAAtV,IAjIG,MAiIHA,IAAAsV,YAKAf,kBAAAhpB,UAAAgqB,iBAAA,SAAAvV,WACAsV,YAAAtV,GAAAsV,WACAE,IAAA,GAAAzf,OAAAuf,WAAAlpB,4UAiCAmoB,kBAAAhpB,UAAAkqB,aAAA,SAAAzV,GAAA0V,SAAAC,UAAA3V,GAAAyV,aAAAC,SAAAC,WAKApB,kBAAAhpB,UAAAqqB,OAAA,SAAA9Y,2ZAkCAyX,kBAAAhpB,UAAAsqB,aAAA,SAAA7V,GAAAvS,OAAAuS,GAAAgV,UAAAvnB,+EAWA8mB,kBAAAhpB,UAAAuqB,QAAA,SA7LG9V,GA6LHvS,OAAAuS,GA7LqC+V,YA6LrCtoB,0EAWA8mB,kBAAAhpB,UAAAyqB,SAAA,SAAAhW,GAtMGvS,OAsMHuS,GAAAvS,MAAAA,8EAWA8mB,kBAAAhpB,UAAA0qB,WAAA,SAAAjW,GAAAvS,OAAAuS,GAAAkW,QA/MgDzoB,OAoNhD8mB,kBAAAhpB,UAAAif,cAAA,SAnNGzX,MAmNH,MAAAiK,UAAAwN,cAAAzX,y4BAwDAwhB,kBAAAhpB,UAAA2gB,iBAAA,SAAAlM,IAAA,MAAA,IAAAkM,oBAKAqI,kBAAAhpB,UAAA4qB,cAAA,SA1P0CnW,IA0P1C,MAAA,IAAAiM,YAKAsI,kBAAAhpB,UAAA6qB,QAAA,SAAApW,IA9P4B,MAAO,IA8PnC2N,0sCAsFA4G,kBAAAhpB,UAAAsV,QAAA,SAAAD,SAAA,MAAAA,SAAAC,SAKA0T,kBAAAhpB,UAAA2V,aAAA,SAAAN,SAGA,IAAA,GAFA4U,KAAA,GAAAvX,KACAoY,QAAAzV,QAAA0V,WACAna,EAAA,EAAAA,EAAAka,QAAAjqB,OAAA+P,IAAA,q7BA4EAoY,kBAAAhpB,UAAAwlB,kBAAA,SAAA/Q,IAAA,MAAAvU,MAAA8qB,kBA9WsDvW,IA8WtDvU,KA9WuD0pB,QA8WvDnV,IAAAA,8HAUAuU,kBAAAhpB,UAAAirB,sBAAA,SAlXmBxW,IAmXnB,IACA,MAAAA,IAAAwW,6PAsBAjC,kBAAAhpB,UAAAkrB,eAAA,SAAAC,EAAA5G,UAEI,MAAJ4G,aAAAC,eACAD,EAAAE,SAAAF,EAAAE,QAAA9G,kPAiBAyE,kBAAAhpB,UAAA6U,WAAA,SAAAtD,MAAA,MAAAA,MAAA+Z,WAAAC,KAAAC,WAKAxC,kBAAAhpB,UAAAyrB,cAAA,SAhZGla,MAAoC,MAAOA,MAAK+Z,WAAaC,KAAKG,cAqZrE1C,kBAAAhpB,UAAA2U,cAAA,SApZGpD,MAoZH,MAAAA,MAAA+Z,WAAAC,KAAAI,kIAYA3C,kBAAAhpB,UAAA8jB,aAAA,SA5ZGvS,MA4ZH,MAAAA,gBAAAqa,mBAKA5C,kBAAAhpB,UAAA6rB,cAAA,SAhaGta,MAgaH,MAAAE,UAAAqa,WAha8D5rB,KAga9DslB,kBAAAjU,OAAA,IAKAyX,kBAAAhpB,UAAA+rB,UAAA,SApaGxa,MAoaH,MApa+CE,UAoa/Csa,UAAAxa,OAKAyX,kBAAAhpB,UAAAgsB,QAAA,SAAAvX,IAAA,MAAA,IAAAkR,+EAOA,IAvaW,MAuaLpb,IAAN,CAKA,GAAA,OAJAA,IAAA0E,MAAAgd,2DAQA1hB,IAAAyG,OAAAC,aAAAib,SAAA3hB,IAvakDsE,UAualD,GAAA,KAttBA,IAutBAI,MAAA5K,UAAA0jB,oBAAAvS,eAAAjL,OAKAA,IAAA,oBAAAA,iCAWAye,kBAAAhpB,UAAA8hB,qBAAA,SAAA/H,IAAAoG,QACA,MAAA,WAAAA,OACA/b,OAEA,aAAA+b,OA3aW1O,uCAibX,+EASAuX,kBAAAhpB,UAAAmsB,YAAA,WAAA,MAAA/nB,QAAAC,6FAOA,OAAA,OAAAshB,KAAA,KAAAyG,aAAAzG,oeAqCAqD,kBAAAhpB,UAAAgmB,aAAA,SAAAqG,KAAAnqB,OAAAoqB,eAAAxJ,cAAAA,QAAAuJ,KAAAnqB,oEAKA,MAAA,kBAAA,SAAAlC,UAAA,SAKAgpB,kBAAAhpB,UAAAkmB,eAAA,uFAIA,GAAAqG,OAAAC,WAKAxD,kBAAAhpB,UAAAysB,gBAAA,WAAA,OAAA,uGAWAzD,kBAAAhpB,UAAA0sB,UAAA,SAAAlgB,KAAAtK,+EAMA8mB,mBAtxBsC1C,0BAuxBpCqG,YAAF,gEGz0BAC,wBAAA,SAAApnB,+CAOA,GAAAzC,OAAAyC,OAAAE,KAAAxF,OAAAA,sDAPAgW,aAAA0W,wBAAApnB,iGAWGtF,KAGH2sB,SAAAlS,SAHyCkL,wJAYzC+G,wBAAA5sB,UAAA8sB,mBAAA,WAAA,MAAAnS,UAAAmL,YAAA5lB,KAAAyW,mNAAGgE,SAaHmH,qBAAA5hB,KAbiDyW,KAajD,UAAA3J,iBAAA,aAAA+f,IAAA,6VAaA3iB,OAAA4iB,eAvBGJ,wBAuBH5sB,UAAA,QAAAgD,IAAA,WAvBG,MAAA9C,MAuBH+sB,UAAA3oB,sCAWAsoB,wBAAA5sB,UAAAktB,UAAA,SAAAC,MAAAC,MAAAznB,KACA0nB,gBACAntB,KAAA2sB,SAAAK,UAAAC,MAAAC,MAAAznB,8BAWAinB,wBAAA5sB,UAAAstB,aAAA,SAjCWH,MAiCXC,MAjCsBznB,KAkCtB0nB,gBACAntB,KAAA2sB,SAAAS,aAAAH,MAAAC,MAAAznB,6MA3EA4nB,gBAAAA,uDAmDAnsB,KAAAC,cAAAA;;;;;;;ALzCA,GAAAqY,MAAA,kOAsBAA,KAAA1Z,UAAAgkB,QAAA,SAAAC,KAAAC,eAAA,GAAAnhB,OAAA7C,IACA,YADA,KAAAgkB,gBAAAA,eAAA,GACOD,KATIA,KAWXtf,OAAA,SAAAC,OAAAuf,WACAA,mNAiBAzK,KAAA1Z,UAAAokB,QAAA,SAAAC,oJAUA3K,KAAA1Z,UAAAskB,UAAA,SAAAH,IAAAI,UACA,IAAAJ,IACA,MAAA,KACII,UArBOA,UAqBXrkB,KAAAskB,eArB+CL,IAsB/C,IAAAM,MAAAvkB,KAAAwkB,OAAAH,iGAUA7K,KAAA1Z,UAAA2kB,UAAA,SAAAN,cAAAnkB,KAAA0kB,iBAAA1kB,KAAAwkB,OAAAL,2NAkBM,GAANE,UAAArkB,KAAAskB,eAAAC,MA/BA1B,KAAA7iB,KAAAwkB,OAAAH,SAmCA,IAAAxB,MAAA7iB,KAAA2kB,oBAAAJ,KAAA1B,MACA,MAAAA,MAEA,GAAA1N,SAAAnV,KAAA4N,KAAAiR,cAAA,gOAxBA,GAAAhc,OAAA7C,4NAmDAwZ,KAAA1Z,UAAA6kB,oBAAA,SA1CmBV,IA0CnBpB,MAAA,GAAAhgB,OAAA7C,IACA,OAAAkK,QAAAC,KAAA8Z,KAAArjB,MAAA,SAAAyJ,KAAA,MAAAxH,OAAA+K,KAAAgX,aAAA/B,KAAAxY,OAAA4Z,IAAA5Z,kCAxCAnJ,KAAAC,cAAAA;;;;;;;oEH/EAkX,8BAEA3P,QAAAuY,cAAAA,oDC1CApY,MAAAyZ,cAAA5K,8FAqBA6K,uBAAAC,KAAA,WAAAC,cAAAA,qBAAA,GAAAF,yBAKAA,sBAAAziB,UAAA4iB,YAAA,SAAAC,UACAC,cAAAA,QAAA,sBAAA,SAAAC,KAAAC,qBAAA,KAAAA,kBAAAA,iBAAA,EACA,IAAAC,aAAAJ,SAAAK,sBAAAH,KAAAC,gBAEAG,IAAAA,MANWF,YAEA,KAMXE,IAAAA,OAAAA,0CAGM,OAANF,cAEAH,cAAAA,QAAA,2BANoB,WAMpB,MAAAD,UAAAO,uBACAN,cAAAA,QAAA,0BANwB,WAMxB,MAAAD,UAAAQ,qBACA,IAAAC,eAAA,SAAA7U,UACA,GAAA8U,eAAAT,cAAAA,QAAA,6BACAU,MAAAD,cAAA1iB,OACA4iB,SAAA,EACAC,UAAA,SAAAC,UACAF,QAAAA,SAAAE,SAEA,KADAH,OAEA/U,SAAAgV,SAIMN,eAANA,QAAAA,SAAAA,aACAF,YAAAW,WAAAF,0KAeAjB,sBAAAziB,UAAAkjB,sBAAA,SAAAL,SAAAE,KAAAC,iBACA,GAXa,MAWPD,KACN,MAAA,KACA,IAAAhC,GAAA8B,SAAAgB,eAAAd,KACA,OAAA,OAAAhC,EACAA,EAEAiC,gBAGArI,SAAAmJ,aAAAf,0IAbW,+BCtCXgB,MAAA,8OAgBA3iB,KAAAC,cAAAA;;;;;;;kGLjCA,KAAA,GAEMwf,KAFNC,GAAA1W,OAAApK,UAAAwV,eAAA9P,KAAAob,EAAAD,KAIAE,EAAAF,GAAAC,EAAAD,IAEA,MAAAE,IAEMC,6JAqBNC,eAAA,WAIA,QAAAA,gBAAAzU,KAAA0U,gEAmCAzH,0BAEA7Q,QAAAuY,cAAAA,gBACItY,WAAJuY,eACArY,OACAkY,eAAA,GAAAI,eAAAA,4JCvDA7H,aAAA,WAIA,QAAAA,cAAA8H,QAAAC,OAAA,GAAAxe,OAAA7C,0YAwBA,sCAAAmgB,uBAAAF,OAAAnG,UAAAC,uEAYAT,aAAAxZ,UAAAwhB,eAAA,SAAAxH,WACI,GAAJyH,QAAAvhB,KAjBwBwhB,mBAAkB1e,IAiB1CgX,UACA,IAAMyH,OACA,MAANA,OAGA,KAAO,GADPH,SAAAphB,KAAAyhB,SACA/Q,EAAA,EAAAA,EAAA0Q,QAAAzgB,OAAA+P,IAAA,CACA,GAAAgR,UAAAN,QAAA1Q,EACA,IAAAgR,SAjBc/E,SAiBd7C,iBACA9Z,MAAAwhB,mBAAA7X,IAAAmQ,UAAA4H,mBAGA,KAAA,IAAAlZ,OAAA,2CAAAsR,sDAfA5Y,KAAAC,cAAAA,+IA4CAD,KAAAygB,cAAAA,SArCA,IAAAxE,oBAAA,mNAqEAA,mBAAArd,UAAAqgB,uBAAA,SAAAhL,QAxDiB2E,UAwDjBC,SACA,GAAAkG,QAAAxF,SAAAmH,qBAAA5hB,KAAAyW,KAAAtB,oBACA,KAAA,IAAA3M,OAAA,4BAAAyX,OAAA,cAAAnG,UC9IA,OAAA9Z,MAAA8M,iBAAAmT,OAAAnG,UAAAC,gCAeAZ,iBAAA,WAiCA,QAAAA,kDAtBAA,kBAAArZ,UAAA4e,UAAA,SAAAF,QAAA,GAAA3b,OAAA7C,KACA6hB,UAAA,GAAAC,IACAtD,QAAApU,QAAA,SAAAqV,OACA5c,MAAAkf,WAAA5V,IAJiCsT,SAKjC5c,MAAAkf,WAAAC,IAAAvC,sQAKAve,KAAAC,cAAAA,aAoCAgY,iBAAA/X,eAAA,WAAA,SAEA,IAAAgY,qBAAA,SAAA9T,QACA,QAAA8T,qBAAA3C,MAAA,GAAA5T,OAZAyC,OAYAE,KAAAxF,OAAAA,2HADAgW,aAAAoD,oBAAA9T,QAaA8T,oBAAAtZ,UAAAmiB,iBAAA,SAAAzD,OAAA0D,MAAA,GAAArf,OAAA7C,IACAwe,QAAApU,QAAA,SAAAqV,2QAkBArG,oBAAAtZ,UAAAqiB,WAAA,SAAAC,UA1CGpiB,KA0CHqiB,WAAAhS,OAAA+R,yFAMApiB,MAAAqiB,WA5CwBjY,QA4CxB,SAAAgY,UA5C0C,MAAAvf,OA4C1Cof,iBA5CqEJ,UA4CrEO,yKAtCAjJ,mDADAjY,KAAAC,cAAAA;;;;;;;AJrDA,GAAAic,iBACAC,IAAA,6BAEAC,MAAA,+BACAC,MAAA,+BACAC,IAAA,uCACAC,MAAA,sFAKAC,aAAA,oBAmDA1E,oBAAA,WAGA,QAAAA,qBAAA2E,aAAAC,uLAWA5E,qBAAAlZ,UAAA+d,eAAA,SAAA1I,QAAAjU,MACA,IAAAiU,UAAAjU,KACA,MAAAlB,MAAA8d,eAEA,QAAA5c,KAAA6c,eACA,IAAAC,eAAAA,kBAAAC,SACA,GAAAC,UAAAle,KAAAme,iBAAArb,IAAA5B,KAAAiN,GAOQ,OANR+P,YACAA,SACA,GAAAE,mCAAApe,KAAA2d,aAAA3d,KAAA4d,iBAAA1c,MACAlB,KAAAme,iBAAAxU,IAAAzI,KAAAiN,GAAA+P,WAEA,SAAAG,YAAAlJ,SACA+I,QAEA,KAAAF,eAAAA,kBAAAM,OACA,MAAA,IAAAC,mBArBiCve,KAAI2d,aAqBrC3d,KAAA4d,iBAAAzI,QAAAjU,KACA,SACQ,IAARlB,KAAAme,iBArBqBhS,IAqBrBjL,KAAAiN,IAAA,CACA,GAAAqQ,QAAAC,cAAAvd,KAAAiN,GAAAjN,KAAAsd,UACAxe,MAAA4d,iBAAAc,UAAAF,QACAxe,KAAAme,iBAAAxU,IAAAzI,KAAAiN,GAAAnO,KAAA8d,iBApBA,MAAA9d,MAAA8d,0EAIA5c,KAAAC,cAAAA,kHASA,IAAAwd,qBAAA,qFA+CA3e,KAAAgD,KAAAkH,OAAA0U,OAAA,gEAcAD,oBAAA7e,UAAA+e,cAAA,SAAAvS,KAAAwS,mHAUAH,oBAAA7e,UAAAif,cAAA,SAAA/c,OAAA,MAAAuP,UAAAwN,cAAA/c,kbAqCA2c,oBAAA7e,UAAAkf,kBAAA,SAAAC,gBACI,GAAJ1K,IAAA,gBAAA0K,gBAAA1N,SAAA2N,cAAAD,gBACAA,cACA,KAAA1K,gHAUAoK,oBAAA7e,UAAA2R,WAAA,SA7EGJ,MA6EH,MAAAA,MA7EuCI,8FA0FvCkN,oBAAA7e,UAAAqf,aAAA,SAAA5K,GAAAjI,KAAAtK,MAnF0B8c,WAoF1B,GAAAA,UAAA,CAnFAxS,KAAAwS,UAAA,IAAAxS,IAoFA,IAAA8S,cAAAhC,eAAA0B,UACAM,cACA7K,GAAA8K,eAAAD,aAAA9S,KAAAtK,OAEAuS,GAAA4K,aAAA7S,KAAAtK,yCAaA2c,oBAAA7e,UAAAwf,gBAAA,SAAA/K,GAAAjI,KAAAwS,WAxFA,GAAAA,UAAA,CAyFA,GAxF2BM,cAwF3BhC,eAAA0B,UACAM,cACA7K,GAAAgL,kBAAAH,aAAA9S,MAEAiI,GAAA+K,gBAAAR,UAAA,IAAAxS,6MA0BAqS,oBAAA7e,UAAA0f,SAAA,SAAAjL,GAAAkL,MAAAzd,MAAA0d,OACAA,MAAAC,cAAAA,oBAAAC,SACArL,GAAAkL,MAAAI,YAAAJ,MAAAzd,MAAA0d,MAAAC,cAAAA,oBAAAG,UAAA,YAAA,+IAaMvL,GA3GGkL,MAAMM,eA2GfN,qOAgCAd,oBAAA7e,UAAAkgB,OAAA,SAAAC,OAAAlR,MAAAR,UAGA,MADA2R,sBAAAnR,MAAA,YACA,gBAAAkR,QA/HoBjgB,KAiIpB2d,aAjIsCwC,uBAiItCF,OAAAlR,MAAAqR,uBAAA7R,sMAqCA,QAAA6P,mCAAAT,aAAAC,iBAA4CyC,WAA5C,GAAAxd,OACIyC,OADJE,KAAAxF,KACA2d,eADA3d,IAEA6C,OAAAwd,UAAAA,maAgBAjC,kCAAAte,UAAA+e,cAAA,SAAAyB,OAAAhU,MAEA,GAAAiI,IAAAjP,OAAAxF,UAAA+e,cAAArZ,KAAAxF,KAAAsgB,OAAAhU,4KAuBA,QAAAiS,mBAAAZ,aAAAC,iBAAA2C,OAAAF,WAAA,GAAAxd,OACIyC,OADJE,KAAAxF,KACA2d,eADA3d,IAEI6C,OAAJ+a,iBAAAA,iBACI/a,MAAK0d,OAASA,OAClB1d,MAAAwd,UAAmBA,UACnBxd,MAAA2d,WAAAD,OAAAE,mBACA5d,MAAA+a,iBAAA8C,QAAA7d,MAAA2d,WAEA,KAAA,GADAhC,QAAAC,cAAA4B,UAAAlS,GAAAkS,UAAA7B,WACA9N,EAAA,EAAAA,EAAA8N,OAAA7d,OAAA+P,IAAA,w1BCjbA6N,kBAAAze,UAAA2R,WAAA,SAAAJ,iLAuBA,QAAAqH,iBAAAmB,KAAA,MAAAvU,QAAAE,KAAAxF,KAAA6Z,MAAA7Z,iHAGA0Y,gBAAA5Y,UAAAgN,iBAAA,SAAAqI,QAAA2E,UAAAC,SAUA,MADA5E,SAAArI,iBAAAgN,UAAA,SAAA,GACA,WAAA,MAAA3E,SAAAnI,oBAAA8M,UAAA,SAAA,uEANA5Y,KAAAC,cAAAA;;;;;;;AFVA,GAAA4Z,cAEEC,KAAF,EACEC,UADY,EAEZC,SAAF,EACEC,QAAF,eAEEC,SAAF,EACEC,UAAY,EACZC,OAAF,EACEC,SAAF,EAEEC,OAAS,EACTC,YAAF,eAEEC,UAAF,EACEC,aADW,aAGXC,UAAF,EAEEC,OAAF,EACEC,SAAW,YAGXC,aAAF,EACEC,YAAF,EACEC,WAAF,EACEC,cAAF,WAGEC,WAAF,EACAC,YAAA,kCAgBAtD,sBAAA,GAAAuD,eAAAA,eAAA,4HAeAtD,qBAAAjZ,UAAAwc,YAAA,SAAAnH,SACA,GAAAoH,IAAA,GAAAC,QAAArH,QAEIoH,IAAJzZ,IADW,SACX6G,KAAA8S,QAAA,IACAF,GAAAzZ,IAAA,UAAA6G,KAAA8S,QAAA,wCAAAF,GAAAzZ,IAAAgX,WAAOnQ,IAAP3J,KAAA0c,UAAA5C,WAGA,OAAAyC,6DACArb,KAAAC,cAAAA,oEA0BA,IAAA0X,sBAAA,SAAAvT,mDASA,GAAAzC,OAAAyC,OAAAE,KAAAxF,KAAA6Z,MAAA7Z,8CATAgW,aAAA6C,qBAAAvT,QAeAuT,qBAAA/Y,UAAA6c,SAAA,SAAA7C,WACA,IAAAiB,YAAAzF,eAAAwE,UAAA9G,iBAAAhT,KAAA4c,cAAA9C,WAEA,OAvBW,2GAqCXjB,qBAAA/Y,UAAAgN,iBAAA,SAAAqI,QAAA2E,UAAAC,SAAA,GAAAlX,OAAA7C,KACA6a,KAAA7a,KA5BY6c,QA4BZC,SAEA,OADAhD,WAAYA,UAAZ9G,cACA6H,KAAAkC,kBAAA,WAEM,GAANR,IAAA1Z,MAAAma,QA5B+CV,YA4B/CnH,SACA5G,SAAA,SAAA0O,UACApC,KAAAqC,WAAA,WAAAnD,QAAAkD,wOAvCAE,sDAkBAjc,KAAAC,cAAAA,aDtIA0X,qBAAAzX,eAAA,WAAA;;;;;;;AAqBA,GAAAqY,gBAAA,MAD2C,UAC3C,OAAA,SACAC,wJAIAC,MAAA,SAAA5K,OAAA,MAAAA,OACC6K,4CAQD,QAAAhB,iBAAAiB,KAAA,MAAAvU,QAAAE,KAAAxF,KAAA6Z,MAAA7Z,+JAeA4Y,gBAAA9Y,UAAAgN,iBAAA,SAAAqI,QAAA2E,UAAAC,SACA,GAAAC,aAAApB,gBAAAqB,eAAAH,uPAWAlB,gBAAAqB,eAAA,SAAAH,WAEI,GAbMnV,OAaVmV,UAAA9G,cAAAxO,MAAA,KAEA0V,aAAAvV,MAAAgV,OACI,IAbsB,IAa1BhV,MAAAhE,QAAA,YAAAuZ,cAAA,UAAAA,aACM,MAAN,KAEA,IAAA7P,KAb4BuO,gBAa5BuB,cAAAxV,MAAAyV,OACAC,QAbmB,EAwBf,IAVJZ,cAAArP,QAAA,SAAAkQ,cACA,GAAA1H,OAAAjO,MAAAsB,QAAAqU,aACA1H,QAAA,IAEAjO,MAAA4V,OAbwB3H,MAAK,gCAkBzByH,SAAJhQ,IACA,GAAA1F,MAAAhE,QAAA,IAb6B0J,IAa7B1J,OAEA,MAAA,2FAWAiY,gBAAA4B,gBAAA,SAAAzL,OACA,GAAAsL,SAAA,GAhBAhQ,IAAAoQ,SAAAC,YAAA3L,aAiBA1E,KAAAA,IAhBY2I,cAiBZ,MAAA3I,IACAA,IAAA,QAEA,MAAAA,MACAA,IAAA,OAEAoP,cAAArP,QAAA,SAAAkQ,cACA,GAAAA,cAAAjQ,IAAA,EAEAsQ,EADAjB,qBAAAY,eACAvL,SACAsL,SAAAC,aAAA,sBAaA1B,gBAAAgC,cAAA,SAAAP,QAAAN,QAAAc,MACA,MAAA,UAAA9L,8GAWA6J,gBAAAuB,cAAA,SAAAW,SAEA,OAAAA,SACA,IAAA,oBAvBA,SAyBA,MAAAA,6EArBA5Z,KAAAC,cAAAA;;;;;;;qFJjEAoS,iBAAA,yJC7BAC,IAAA,KA8CMC,cASNC,OAAA,0BAQAC,gCAAAD,OAAA,kDACAE,iCAAAF,OAAA,2GAOAG,eAAAjK,MAAA+J,gCAAAD,OAAA,oMAFMI,gBAAYlK,MASlBgK,iCAAAF,OAAA,+LAJMK,eASNnK,MAAA6J,cAAAI,eAAAC,gBAAAE,2BAGAC,UAAAP,OAAA,gEAEAQ,aAAAR,OAAA,6eAeAS,YAAAvK,MAAAqK,UAAAC,aAAAE,iIAYAC,0BAAAvU,UAAAwU,iBAAA,SAAAC,IAIA,IAVA,GAAAC,SAAAD,GAAA,WAUAC,YACAhB,IAAAiB,cAAAD,SATAxU,KAAA0U,aAAA,SAEalB,IASbmB,WAAAH,SACAxU,KAAA4U,MAAApB,IAAAqB,UAAAL,UAIAxU,KAAA8U,oBAAA,0BAGQN,QAARhB,IAAAuB,WAAAP,aAIA,MAAAA,SAAA,CAGUhB,IAAViB,cAAAD,UACUxU,KAAVgV,WAAA,QAGQ,IAARlJ,MAAAmJ,sBAAAT,QATmEhB,IASnE0B,YAAAV,SACA,IAAA1I,KAAA,CACA0I,QAAA1I,IARgB,mGAoBhBuI,yBAAAvU,UAAA4U,aAAA,SAAAS,SAAA,GAAAtS,OAAA7C,KACAoV,QAAA5B,IAAA6B,SAAAF,SAAAnC,aACI,KAZKe,eAYTuB,eAAAF,SAEM,YAbEpV,KAYR8U,oBAAA,EAGA9U,MAAAuV,IAAAC,KAAA,KACAxV,KAAAuV,IAAAC,KAAAJ,SACA5B,IAAAiC,aAAAN,SAAA/K,QAAA,SAAApI,MAAA0T,0CAEM,KAANvB,YAAAmB,eAAAK,OACU,YAbkB9S,MAAAiS,oBAA0B,EAe5Cb,WAZU0B,SAaV3T,MAAV4T,YAAA5T,QACUkS,aAAVyB,SACU3T,MAAV6T,eAAA7T,QACAa,MAAA0S,IAAAC,KAAA,KACQ3S,MAZK0S,IAACC,KAAQE,UAatB7S,MAAA0S,IAAAC,KAAA,sFAUAnB,yBAAAvU,UAAAkV,WAAA,SAAAR,SACA,GAAAY,SAAA5B,IAAA6B,SAAAb,SAAAxB,aACAe,gBAAAuB,eAAAF,WAAA3B,cAAA6B,eAAAF,glBC1CA,+YAAAU,gBAfAC,iBAAA,SAAAzQ,6GAAA0Q,aAAAD,iBAAAzQ,QA0BAyQ,iBAAAjW,UAAAmW,SAAA,SAAAC,IAAAlU,OACA,GAAA,MAAMA,MACN,MAAA,KApBA,QAAAkU,KAqBA,IAAAC,eAAAA,gBAAArP,KACQ,MAAR,MACM,KApBKqP,eAoBXA,gBApB2BC,KAqBnB,MAAIpU,iBApBiBqU,cAAsBrU,MAAMsU,uCAqBjDtW,KApBKuW,kBAAkBvU,MAAO,QACvBwU,aAAAxW,KAoBfyW,KAAA3F,OAAA9O,QACM,KApBKmU,eAoBXA,gBApB2BO,MAqBnB,MAAI1U,iBApBiB2U,eAAuB3U,MAAMsU,uCAqBlDtW,KApBKuW,kBAAkBvU,MAAO,SAqBtC4U,cAAA,OACM,KApBKT,eAoBXA,gBApB2BU,OAqBnB,GAAI7U,gBApBiB8U,kEAuB7B,MADA9W,MAAAuW,kBAAAvU,MAAA,UACA,GAAAwG,OAAA,wCACA,KAAA2N,eAAAA,gBAAAY,IACQ,MAAR/U,iBAAAgV,sBAAAhV,gBAAAiV,aAEAjV,MAAAsU,uCAEAtW,KAAAuW,kBAAAvU,MAAA,OACA4T,YAAA9E,OAAA9O,QACA,KAAAmU,eAAAA,gBAAAe,aAEA,GAAAlV,gBAAAgV,qBACA,MAAAhV,OAAAsU,2CAEAtW,MAAAuW,kBAAAvU,MAAA,4MAYA+T,iBAAAjW,UAAAyW,kBAAA,SAAAvU,MAAAmV,sKAUApB,iBAAAjW,UAAAsX,wBAAA,SA/BGpV,OA+BH,MAAA,IAAAqU,cAAArU,QAKA+T,iBAAAjW,UAAAuX,yBAAA,SAnCGrV,OAmCH,MAAA,IAAA2U,eAAA3U,QAKA+T,iBAAAjW,UAAAwX,0BAAA,SAAAtV,OAAA,MAAA,IAAA8U,gBAvCgF9U,QA4ChF+T,iBAAAjW,UAAAyX,uBAAA,SAAAvV,OAAA,MAAA,IAAAiV,aAAAjV,QAIA+T,iBAAAjW,UAAA0X,+BAAA,SAAAxV,OACA,MAAA,IAAAgV,qBAAAhV,0BAlGA8T,4CAyDA5U,KAAAC,cAAAA,gEAiEAD,SAAAT,GAAAQ,aAAAC,KAAAuW,cAAAA,OAAAvS,MAAAwS,cA3DA,IAAAC,eAAA,0JAyFA,MAdAA,eAAA7X,UAAA8X,YAAA,aAKAD,cAAA7X,UAAAgG,SAAA,4IASA6R,iBACAtB,aAAA,SAAA/Q,QAAA,QAAA+Q,yEAKA,MALAL,aAAAK,aAAA/Q,oEAKA+Q,cALAsB,eAMAhB,cAAA,SAAArR,QAAA,QAAAqR,0EAKA,MALAX,aAAAW,cAAArR,sEAKAqR,eALAgB,eAMAb,eAAA,SAAAxR,QAAA,QAAAwR,2EAKA,MALAd,aAAAc,eAAAxR,wEAKAwR,gBALAa,eAMAV,YAAA,SAAA3R,QAAA,QAAA2R,wEAKA,MALAjB,aAAAiB,YAAA3R,kEAKA2R,aALAU,eAMAX,oBAAA,SAAA1R,QAAA,QAAA0R,sFAAAhB,aAAAgB,oBAAA1R,uGAAAqS,eCvSAE,8ZAeCnP,QADDoN,aAAA9M,SAAA+M,mBA+BA+B,eAzBAC,cAAAA,sBAAAC,cAAAA,aAAA,UAAAH,qCAyBA,iPA4BA,MATAC,eAAAG,qBAAA,SAAAtS,QACA,OACAb,SAAAgT,cACA/S,YACA2D,QAAAwP,cAAAA,OAAAC,SAAAxS,OAAAyS,gEANAC,+BAWAP,iBACAA,eAAA7W,aACAC,KAAA+D,cAAAA,SAAKC,OACLH,WACIuT,gCACJ5P,QAAA6P,cAAAA,aAAA5P,WAAA6P,aAAA3P,UACKH,QAPS+P,sBAOdzP,SAAA0P,gBAP6CC,OAO7C,IACKjQ,QAPS+P,sBAOdzP,SAAA4P,gBAP6CD,OAO7C,IACAjQ,QAAA+P,sBAAAzP,SAAA6P,qBAAAF,OAAA,IACAjQ,QAAeoQ,sBAAf9P,SAAA+P,qBACIC,qBACJtQ,QAAAuQ,cAAAA,iBAAAC,YAAAF,sBACAtQ,QAAAyQ,iBAAAD,YAAAE,qBACIA,oBACJC,cAAAA,YANAC,aAQAC,wBACAC;;;;;;;;;;;;;;GPtGAzQ,gDAAA,iJAGA7H,KAAAC,cAAAA,aCpBA4H,WAAA3H,eAAA,WAAA,SAEA,IAAA+G,iBACAA,eAAcC,IAAd,EACAD,cAAcwJ,KAAd,EACAxJ,cAAcyJ,IAAd,EACAzJ,cAAc0J,OAAd,EACA1J,cAAcE,QAAd,EACAF,cAAc2J,KAAd,EACA3J,cAAc4J,MAAd,EACA5J,cAAcA,cAAcC,KAA5B,MACAD,cAAcA,cAAcwJ,MAA5B,OAGAxJ,cAAqBA,cAArByJ,KAAA,MACAzJ,cAAAA,cAAA0J,QAAA,SACA1J,cAAAA,cAAAE,SAAA,UACAF,cAAAA,cAAA2J,MAAA,OACA3J,cAAAA,cAAA4J,OAAA,OACA,IAAA9D,cACAA,YAAW+D,OAAS,EACpB/D,WAAWgE,KAAX,EACAhE,WAAWiE,gBAAX,EACAjE,WAAWC,QAAU,EACrBD,WAAWgB,KAAX,EACAhB,WAAWe,UAAX,EACAf,WAAWA,WAAW+D,QAAU,SAGhC/D,WAAAA,WAAkCgE,MAAlC,OACAhE,WAAAA,WAAsBiE,iBAAtB,kBACAjE,WAAAA,WAAsBC,SAAtB,UACAD,WAAAA,WAAAgB,MAAA,OACAhB,WAAAA,WAAsBe,WAAtB,WACA,IAAA/C,gBACAA,cAAakG,MAAb,EACAlG,aAAamG,KAAb,EACAnG,aAAaoG,QAAb,EACApG,aAAazD,MAAb,EACAyD,aAAaqG,OAAb,EAGArG,aAAAA,aAAAkG,OAAA,QACAlG,aAAAA,aAAAmG,MAAA,OACAnG,aAAAA,aAAAoG,SAAA,UACApG,aAAAA,aAAAzD,OAAA,QACAyD,aAAAA,aAA0BqG,QAA1B,QACA,IAAA7L,eACAA,aAAYK,KAAO,EACnBL,YAAY5E,KAAZ,EACA4E,YAAYC,KAAZ,EACAD,YAAYE,UAAY,EACxBF,YAAYG,KAAZ,EACAH,YAAYQ,KAAZ,EACAR,YAAYU,aAAZ,EACAV,YAAYA,YAAYK,MAAQ,OAChCL,YAAYA,YAAY5E,MAAxB,OAGA4E,YAAAA,YAAAC,MAAA,OACAD,YAAAA,YAAwBE,WAAxB,YACAF,YAAAA,YAAwBG,MAAxB,OACAH,YAAAA,YAAAQ,MAAA,OACAR,YAAAA,YAAwBU,cAAxB,cACA,IAAAsF,uBACAA,qBAAoBG,KAApB,EACAH,oBAAoBE,KAApB,EACAF,oBAAoBC,YAApB,6BCvEAD,oBAAAA,oBAAAG,MAAA,mPA+CA,IANI5M,KAAKuS,SAAT,GAAAC,KAKAxS,KAAAyS,iBAAA,GAAAD,KACAhM,QAGA,MAAAA,mBAAAqD,aAEArD,SAAgB4D,QAAQ,SAACiC,OAAQC,MACjCD,OAAAjC,QAAA,SAAApI,OAA4C,MAAAa,OAA5CuJ,OAAAE,KAA8DtK,eAI9DkI,QAAAC,KAAA3D,SAAA4D,QAAA,SAAAkC,wKAYAzC,SAAAyB,yBAAA,SAAAoH,eACA,GAAAlM,SAAA,GAAAqD,eACA6I,eAAAlO,MACoB,MAAM4F,QAD1B,SAAAuI,MACA,GAAAC,OAAAD,KAAA1M,QAAA,IACA,IAAA2M,MAAA,EAAA,CAEA,GAAAtG,MAAAqG,KAAAE,MAAA,EAAAD,OACA5Q,MAAA2Q,KAAAE,MAAAD,MAAA,GAAAE,2CAWAjJ,QAAA/J,UAAAsM,OAAA,SAAAE,KAAAtK,OAEA,GADyBqK,QACzBrM,KAAA+S,OAAAzG,KACA,QAAAD,OACArM,KAAA2J,IAAA2C,KAAAtK,+UAgCA6H,QAAA/J,UAAAgD,IAAA,SAAIwJ,MACJ,GAAAD,QAAArM,KAAA+S,OAAAzG,gEAWAzC,QAAA/J,UAAAqM,IAAA,SAPGG,MAOH,MAAAtM,MAAAuS,SAAApG,IAAAG,KAAA0G,qGAYAnJ,QAAA/J,UAAA6J,IAAA,SAAA2C,KAAAtK,OATAsI,MAAAC,QAAAvI,OAUUA,MAAVrB,QACAX,KAAAuS,SAAA5I,IAAA2C,KAAA0G,eAAAhR,MAAAwK,KAAA,wFAYA3C,QAAA/J,UAAAuM,OAAA,WAAA,MAAA/B,OAAA2I,KAAAjT,KAAAuS,SAPsDlG,WAYtDxC,QAAA/J,UAAAoT,OAAA,WAAA,GAAArQ,OAAA7C,KACAmT,oBAEInT,MAAJuS,SAAAnI,QAAA,SAAAiC,OAAAC,MACA,GAAA9H,oQAOGqF,QAAH/J,UAAAsT,QAAG,WAAH,KAAA,IAAG5K,OAAH,yDAiBAqB,QAAA/J,UAAAuT,uBAAA,SAAA/G,MACA,GAAAgH,QAAAhH,KAAA0G,iDCpMAhT,KAAAyS,iBAAA9I,IAAA2J,OAAAhH,kBAqEApD,gBAAA,WAIA,QAAAA,iBAAAM,UAAA,KAAAA,OAAAA,QACA,IAAArD,MAAAqD,KAAArD,KAAAkF,OAAA7B,KAAA6B,OAAA7E,QAAAgD,KAAAhD,QAAmCiF,WAAnCjC,KAAAiC,WAAAvK,KAAAsI,KAAAtI,KAAAuE,IAAA+D,KAAA/D,GACIzF,MAAKmG,KAAT,MAAAA,KAAAA,KAAA,KACAnG,KAAAqL,OAAA,MAAAA,OAAAA,OAAA,+JAiCAnC,iBAAApJ,UAAA8J,MAAA,SAAA/B,SACA,MAAA,IAAAqB,kBACM/C,KAAN0B,SAAA,MAAAA,QAAA1B,KAAA0B,QAAA1B,KAAAnG,KAFgEmG,KAGhEkF,OAAAxD,SAAA,MAAAA,QAAAwD,OAAAxD,QAAAwD,OAAArL,KAAAqL,OACA7E,QAAAqB,SAAA,MAAAA,QAAArB,QAAAqB,QAAArB,QAAAxG,KAAAwG,QACAiF,WAAA5D,SAAA,MAAAA,QAAA4D,WAAA5D,QAAA4D,WAAAzL,KAAAyL,WAEAvK,KAAA2G,SAAA,MAAAA,QAAA3G,KAAA2G,QAAA3G,KAAAlB,KAAAkB,+EAiDAiI,oBAAA,SAAA7D,QAiCA,QAAA6D,uBACA,MAAA7D,QAAAE,KAAAxF,MAAAqL,OAAA,IAAAI,WAAA,KAAAvK,KAAA+K,aAAAoG,QAAA7L,QAAA,GAAAqD,YAAA7J,WAlCAsG,WAAA6C,oBAAA7D,6BAAA4D,kDAIAhI,KAAAC,cAAAA;;;;;;;4RRhIA0K,UAAA,SAAAR,QAAA,MAAAA,SAAA,KAAAA,OAAA,KCPAuE,aAAA,WAAA,QAAAA,iBAWA,MANAA,cAAA9P,UAAA+P,UAAA,SAAAC,GAAA,MAAAC,kBAAAD,+EAMAF,gBAqDA/J,gBAAA,8MAQA7F,KAAAgQ,UAAAC,YAAAC,qJAcArK,gBAAA/F,UAAAqM,IAAA,SAzBGgE,OAyBH,MAAAnQ,MAAAgQ,UAAA7D,IAAAgE,8OAoBAtK,gBAAA/F,UAAA6J,IAAA,SAAIwG,MAAJC,KACI,OAAJ,KAAQA,KAAR,OAAAA,IAEQ,WADApQ,MAhCEqQ,OAgCVF,2GAYAtK,gBAAA/F,UAAAwQ,OAAA,SAAAC,cAAA,GAAA1N,OAAA7C,IACAuQ,cAAAP,UAAA5F,QAAA,SAAApI,MAAAmO,OACA,GAAAK,MAAA3N,MAAAmN,UAAAlN,IAAAqN,gFAUAtK,gBAAA/F,UAAAsM,OAAA,SAAA+D,MAAAC,KACA,OAAA,KAAAA,KAAA,OAAAA,IAAA,wFAUAvK,gBAAA/F,UAAA2Q,UAAA,SAAAF,cAAA,GAAA1N,OAAA7C,IACAuQ,cAAAP,UA7ByB5F,QA6BzB,SAAApI,MAAAmO,OAEA,IAAA,GADAK,MAAA3N,MAAAmN,UAAAlN,IAAAqN,WACAO,EAAA,EAAAA,EAAA1O,MAAArB,SAAA+P,yDAUA7K,gBAAA/F,UAAA6Q,WAAA,SAAAJ,cAAA,GAAA1N,OAAA7C,IACAuQ,cAAAP,UAAA5F,QAAA,SAAApI,MAAAmO,OACM,GAANK,MAxBgC3N,MAwBhCmN,UAAAlN,IAAAqN,UACAK,MAAA7P,OAAA,CACA,KAAA,GAAA+P,GAAA,EAAAA,EAAA1O,MAAArB,SAAA+P,yDAWA7K,gBAAA/F,UAAAgG,SAAA,WAAA,GAAAjD,OAAA7C,KACA4Q,oTCrLAnJ,KAAA,WAAA,QAAAA,eAMAA,MAAA3H,UAAAoD,KAAA,WACA,MAAA,gBAAAlD,MAAAkG,MAEWrE,KAAXC,MAAA9B,KAAA,6EAwBAyH,KAAA3H,UAAAwH,KAAA,SAAAuJ,cACA,OADA,KAAAA,eAAAA,aAAA,UACA7Q,KAAAkG,gBAAAL,iBACA,MAAA7F,MAAAkG,MAAAJ,UAEA,IAAA9F,KAAAkG,gBADwBwG,aAExB,OAAAmE,cACA,IAAA,SACA,MAAAC,QAAAC,aAAAC,MAAA,KAAA,GAAAC,aAAAjR,KAAA,OACA,KAAA,WAEA,MAAA8Q,QAAAC,aAAAC,MAAA,KAAA,GAAAE,YAAAlR,KAAA,OACA,SACA,KAAA,IAAAwI,OAAA,mCAAAqI,cAIA,MAAA,OAAA7Q,KAAAkG,MACW,wFAaXuB,KAAA3H,UAAA0H,YAAA,iGAWAC,KAAA3H,UAAAyH,KAAA,WACA,GAAAvH,KAAAkG,gBAAA2G,MAEA,MAAA7M,MAAA,KAEA,IAAAA,KAAAkG,gBAAAwG,+HCjBAf,SAAA,SAAArG,QAIA,QAAAqG,UAAAD,iBAAA,GAAA7I,OACIyC,OADJE,KAAAxF,OAAAA,WAEI6C,OAAKqD,MAATwF,gBAAAvF,KACItD,MAAKwI,OAATK,gBAAoCL,OACpCxI,MAAA+I,GAAA/I,MAAAwI,QAAA,KAAAxI,MAAAwI,QAAA,sHAIAxI,MAAA4C,IAAAiG,gBAAAjG,gBAZAa,WAAAqF,SAAArG,QCvFAqG,SAAA7L,UAAAgG,SAAA,2GDuFA2B,uBCtEA0J,WAAA,eACEC,kBAAF,KAWA7H,aAAA,WAAA,QAAAA,4GAQA,qBAAA8H,MAKA9H,aAAAzJ,UAAAuO,cAAA,WARG,MAQH,QAAAiD,ySA2BA/H,aAAAzJ,UAAAiN,KAAA,SAAAsE,MAAAE,SAAApL,KAAAqL,YAAA,qDAdAH,KAAAI,YACQJ,KAmBRI,WAAAC,YAnBA,iDAGAxQ,KAAAC,cAAAA;;;;;;;uTL0BA,QAAAwM,kBAAYjD,IAAZkD,KAAuBhD,qBAAvB,GAAA/H,OACAyC,OADAE,KAAAxF,OAAAA,IAMA,IAJA6C,MAAA+K,KAAAA,KACI/K,MAAK+H,oBAATA,oBACI/H,MAAKgL,WAAT,EAEMnD,IAAItE,SAAW+B,cAAcC,IAC7B,KAAM,IAAZ0F,WAAAC,0HAMMlL,MAANmL,WAAAC,WAAAC,OACM,IAANC,IAAAtL,MAAAuL,IAAAR,KAAAS,eACMT,MAANU,iBAAAH,GAAAtL,MAEA,IAAA0L,UAAAX,KAAAY,gBAAA3L,MAAmDuL,KAC3C3I,IAAMiF,IAAIjF,GAClBA,KAAAQ,QAAA,qBAAA,EAEAR,IAAAA,IAAAgJ,QAAA,mBAAA,IAAoDF,SAApD,KAGA9I,IAAiBiJ,YAAjB,qBAAoDjJ,IAApD9E,OAAA,kBAAAA,SAAA8E,IAAAA,IAAAkJ,UAAA,EAAAlJ,IAAA9E,OAAA,kBAAAA,QAAA,IAAA4N,SAEA,IAAAK,QAAA/L,MAAAgM,QAAAjB,KAAAkB,MAAArJ,KACA0F,OAAA,SAAA4D,OACA,GAAUlM,MAAVmL,aAAAC,WAAAe,UAAA,CAKA,GAFAnM,MAAAmL,WAAAC,WAAAgB,KACArB,KAAWsB,QAAXN,SACA/L,MAAAgL,UAA2B,CACjB,GAAVsB,mBAAA,GAAAjG,kBAAA/C,KAAAiJ,sBAAAlO,KAAA+K,aAAAzD,MAAA/C,IAAAA,KAMA,OALAmF,uBAEAuE,kBAAkCvE,oBAAlChB,MAAAuF,wBAEUpE,kBAAV1K,MAAiC,GAAjCsL,UAAAwD,oBAIQ,GAARzD,iBAAA,GAAAxC,kBAAA/C,KAAAtD,MAAAwM,cAAA5J,IAAAA,KACA5C,OAAA+H,sBAEAc,gBAAA7I,MAAA+H,oBAAAhB,MAAA8B,kBACAX,iBAAAe,KAAA,GAAAH,UAAAD,kBACQX,iBAARuE,aAEAvD,QAAA,SAAA1L,OACQ,GAAIwC,MAAZmL,aAAAC,WAAAe,UAAQ,CAERnM,MAAAmL,WAAAC,WAAAgB,KACQrB,KAARsB,QAAAN,OACA,IAAAlD,iBAAA,GAAAxC,kBAAA/C,KAAA9F,MAAAkP,QAAArO,KAAA+K,aAAAzD,OAEAoC,uBACAc,gBAAAd,oBAAAhB,MAAA8B,kBAIAX,iBAAA1K,MAAA,GAAAsL,UAAAD,mBAKA,OAHAkD,QAAA9B,iBAAA,OAAA3B,QACAyD,OAAA9B,iBAAA,QAAAf,SACA6B,KAAAb,KAAA6B,QACA,WACA/L,MAAAmL,WAAAC,WAAAe,UACAJ,OAAA5B,oBAAA,OAAA7B,kIAnBAwC,iBAAA7N,UAAA0P,SAAA,SAAAxM,MA8BAhD,KAAA6N,WAAA,EACA7N,KAAA4N,KAAA6B,iBAAAzP,KAAAoO,KAEApO,KAAAgO,aAAAC,WAAAe,+PA2BAU,cAAA,SAAApK,mEAQA,GAAAzC,OAAAyC,OAAAE,KAAAxF,OAAAA,0GARAsG,WAAAoJ,cAAApK,QAYAoK,cAAA5P,UAAAyN,iBAAA,SAAA3F,SACA,MAAA,IAAA+F,kBAAA/F,QAAA5H,KAAA2P,cAAA3P,KAAA0N,sCAbApE,yCAnCApI,KAAAC,cAAAA,aDhKAuO,cAAAtO,eAAA,WAAA;;;;;;;wDAmDA,QAAAqJ,eAAUC,IAAVC,WAAAC,qBAAA,GAAA/H,OAAA7C,IACAA,MAAA4H,QAAA8C,IACA1K,KAAO6K,SAAP,GAAAC,iBAAAA,WAAA,SAAAC,6CAEMC,MAANC,KAAA9C,cAAAuC,IAAAtE,QAAA8E,cAAAR,IAAAjF,iCAEQuF,KAARvB,gBAAAiB,IAAAjB,gBAKA,IAAA0B,QAAA,kGAUAhF,SAAA,KAAA6E,KAAAH,SAAAG,KAAAI,aAAAJ,KAAAH,+CAWA,IAAAQ,SACAA,OAAAlF,KAAA,IAAA,EAGQ,IAARK,SAAAqD,QAAAyB,yBAAAN,KAAAO,yBAEA9F,IAAA+F,eAAAR,OAAAN,IAAAjF,IACcgG,WAAdT,KAAAS,YAAA,KACAC,gBAAA,GAAAxC,kBAAA/C,KAAAA,KAAAkF,OAAAA,OAAA7E,QAAAA,QAAAiF,WAAAA,WAAAhG,IAAAA,KACA,OAAYmF,sBACFc,gBAAVd,oBAAAhB,MAAA8B,iBAEA,IAAAb,UAAA,GAA2Bc,UAA3BD,gBAEA,IADAb,SAAAe,GAAAC,UAAAR,QACAR,SAAAe,GAIA,MAHAb,kBAAAe,KAAAjB,0CAKAE,kBAAA1K,MAAAwK,WAGAkB,QAAA,SAAAC,KACA,GAAAN,iBAAA,GAAAxC,kBACY/C,KAAZ6F,IACU9K,KAAV+K,aAAAzD,MACA6C,OAAAL,KAAAK,OACAI,WAAwBT,KAAxBS,YAGqC,OAArCb,sBAEcc,gBAAdd,oBAAAhB,MAAA8B,kBAEAX,iBAAA1K,MAAA,GAAAsL,UAAAD,kBAYA,IAVA7I,MAAAqJ,uBAAAxB,IAAqCM,MACrC,MAAAN,IAAAlE,UACUkE,IAAVlE,QAAA,GAAAqD,UAGAa,IAAAlE,QAAA2F,IAAA,WACQzB,IAARlE,QAAoB4F,OAApB,SAAA,qCAEA1B,IAAAlE,QAAY4D,QAAZ,SAAAiC,OAA6BC,MAA7B,MAAAtB,MAAAuB,iBAAAD,KAAAD,OAAAG,KAAA,QAEA,MAAA9B,IAAUhB,cAAV,MAAkCsB,KAAKtB,aACvC,OAAYgB,IAAIhB,cAChB,IAAA+C,qBAAAC,YACA1B,KAAAtB,aAAkC,aACtB,MACZ,KAAA+C,qBAAAE,KACA3B,KAAAtB,aAAkC,MACtB,MACZ,KAAA+C,qBAAAG,KACA5B,KAAAtB,aAAA,MACY,MACZ,KAAA+C,qBAAAI,KACA7B,KAAAtB,aAAA,MAEA,MACA,SAEA,KAAA,IAA4BlB,OAA5B,8CAOA,MAHAwC,MAAA8B,iBAAA,OAAA3B,QACAH,KAAA8B,iBAAA,QAAAf,SACAf,KAAA+B,KAAAlK,MAAA+E,QAAAR,WACA,WACA4D,KAAAgC,oBAAA,OAAA7B,2IAcA,GAAA,MAAMT,IAANlE,SAAA,MAAAkE,IAAAlE,QAAA1D,IAAA,gBAIA,OAAQ4H,IAARrD,aACM,IATKZ,aAAYK,KAUf,KACR,KAAAL,aAAA5E,KACAmJ,KAAAuB,iBAAA,eAAA,mBACQ,MACR,KAAA9F,aAAAC,KACAsE,KAAAuB,iBAAA,eAAA,kDACQ,MACR,KAAA9F,aATkBG,KAUlBoE,KAAAuB,iBAAA,eAAA,aACA,MACA,KAAA9F,aAAAQ,KACA,GAAAM,MAAAmD,IAAAnD,MACAA,MAAArG,MACA8J,KAAAuB,iBAAA,eAAAhF,KAAArG,yBA+BA+L,mBAAA,oOAYAA,oBAAAnN,UAAAoN,iBAAA,SAAAxC,KACA,GAAAyC,WAAAC,SAAAC,UAAArN,KAAAsN,YAEAH,4RAMArE,YAAAhJ,UAAAyN,iBAAA,SAAO3F,SA+CP,MADA5H,MAAAwN,cAAAN,iBAAAtF,SACA,GAAA6C,eAAA7C,QAAA5H,KAAAyN,YAAAzN,KAAA0N,6DA3CAxM,KAAAC,cAAAA,0DDpPAD,KAAA6H;;;;;;;AAkEA,GAAAT,gBAAA,WAuBA,QAAAA,gBAAYkB,UAAZ,KAAAA,OAAYA,QACZ,IAAApD,QAAAoD,KAAApD,OAAAI,QAAAgD,KAAAhD,QAAAL,KAAAqD,KAAArD,KAAAV,IAAA+D,KAAA/D,IAAAG,OAAA4D,KAAA5D,OAAgDD,OAAhD6D,KAAA7D,OAAA8D,gBAAAD,KAAAC,gBAAAC,aAAAF,KAAAE,YACI1J,MAAKoG,OAAT,MAAAA,OAAAC,oBAAAD,QAAA,KACIpG,KAAKwG,QAAT,MAAAA,QAAAA,QAA+C,KAC/CxG,KAAAmG,KAAA,MAAAA,KAAAA,KAAA,+SARAwD,IAAA,SAAAhE,QAAA3F,KAAA2F,OAAkCA,wCAuClC2C,eAAAxI,UAAA8J,MAAA,SAAA/B,SACA,MAAA,IAAAS,iBACMlC,OAANyB,SAAA,MAAAA,QAAAzB,OAAAyB,QAAAzB,OAAApG,KAAAoG,OACAI,QAJyEqB,SAIzE,MAAAA,QAAArB,QAAAqB,QAAArB,QAAA,GAAAqD,SAAA7J,KAAAwG,SACML,KAAN0B,SAJuC,MAIvCA,QAJ+B1B,KAI/B0B,QAAA1B,KAAAnG,KAAAmG,KACAV,IAAAoC,SAAA,MAAAA,QAAApC,IAAAoC,QAAApC,IAAAzF,KAAAyF,IACAE,OAAAkC,SAAA7H,KAAA8J,mBAAAjC,QAAAlC,QAAAkC,QAAAjC,QACA6D,gBAAA5B,SAAA,MAAAA,QAAA4B,gBAAA5B,QAAA4B,gIAWAnB,eAAAxI,UAAAgK,mBAAA,SAAAnE,QAEI,MAAJA,QAEAA,iBAAAE,iBALWF,OAOXoE,sFAVa/J,KAOb2F,QAcA2C,eAAAxI,UAAAkK,aAAA,SAAAC,WAAA,GAAApH,OAAA7C,SAAA,KAAAiK,YAAAA,aACA,IAAAtE,QAAA,GAAAE,uBAVAqE,QAAAC,KAAAF,WAAAG,QAAA,SAAAC,KAWA,GAAArI,OAAAiI,UAV6CI,IAW7CC,OAAAC,QAAAvI,OACAA,MAAAoI,QAAA,SAAAvJ,MAAA,MAAAgC,OAAA2H,aAAAH,IAAAxJ,KAAA8E,yDAcA2C,eAAAxI,UAAA0K,aAAA,SAAAH,IAAArI,MAAA2D,QACA,gBAAA3D,SAEAA,MAAAH,KAAAK,UAAAF,oDA+EAiH,mBAAA,SAAA3D,0HAAAgB,WAAA2C,mBAAA3D,4BAAAgD,gDAhDApH,KAAAC,cAAAA;;;;;;;AHhIA,GAAAkE,SAAA,SAAAC,QAIA,QAAAD,SAAAE,gBAAA,GAAA1C,OACIyC,OADJE,KAAAxF,OAAAA,KAGAyF,IAAAF,eAAAE,GACA5C,OAAA4C,IAAAF,eAAAE,GACA,IAAAC,WAAAH,eAAAI,QAAAJ,eAAAK,MAAA,IAAAF,UAAA,CACA,GAAQC,YAAR,MAKAA,OAJA,gBAAAD,YAAAA,oBAAAG,iBAIAH,UAAyBI,WAHzBC,gBAAAL,WAAAI,4BAMQ,GAAIE,QAAZ,KACA,GAAAnD,MAAA4C,IAAAQ,QAAA,OACAD,OAAA,KAAAnD,MAAA4C,IAAA5C,MAAA4C,IAAA9E,OAAA,GAAA,GAAA,wCAMIkC,OAAKqD,MAATX,eAAAY,KACItD,MAAKuD,OAATC,oBAAAd,eAAAa,gNA2GA,MAtIAE,WAAAjB,QAAAC,QAuCAD,QAAAvF,UAAAyG,kBAAA,WACA,OAAAvG,KAAAwG,QAAA1D,IAAA,iBACA,IAAA,mBACA,MAAA2D,aAAA5E,IACM,KATK,oCAUH,MATO4E,aAAYC,IAUrB,KATK,sBAUH,MATOD,aASfE,SACM,KAAN,aACA,IAAA,YACA,MAAAF,aAAAG,IACA,KAAA,kKASAvB,QAAAvF,UAAA+G,0BAAA,WACA,MAAA,OAAA7G,KAAAkG,MATAO,YAAAK,KAWA9G,KAAAkG,gBAAAL,iBATAY,YAAAC,KAWA1G,KAAAkG,gBAAAa,UATAN,YAAAE,UAWA3G,KAAAkG,gBAAAc,QATAP,YAA6BQ,KAW7BjH,KAAAkG,gBAAAgB,eATAT,YAAAU,aAWAnH,KAAAkG,OAAA,gBAAAlG,MAAAkG,MACAO,YAAA5E,uBAWAwD,QAAAvF,UAAAsH,QAAA,WACA,OAAApH,KAAAqH,aACA,IAAAZ,aAAA5E,KAEA,IAAA4E,aAAAC,KACA,MAAA1G,MATWsH,MAUX,KAAAb,aAAAE,UACA,MAAA3G,MATWkG,KAUX,KAAAO,aAAAG,KACA,MAAA5G,MAAAsH,MACA,KAAAb,aAAAQ,KACA,MAAAjH,MAAAuH,MACA,KAAAd,aAAAU,aACA,MAAAnH,MAAAwH,aAEA,uBAqCAnC,SAtIAoC,wBCnFAC,EAAA,gBAAAxD,QAAAA,OAAAyD,qFAqHApE,KAAA,qHACAA,MAAAzD,UAAA8H,QAAA,SAAAnC,IAAWoC,SAgBX,GAAAC,mBACA,IAAA,gBAAArC,KAfAqC,mBAAAC,YAAA/H,KAAAgI,SAAA,GAAA3C,SAAA4C,aAAAjI,KAAAkI,gBAAAL,QAAAM,cAAAC,IAAA,WAiBA,CAAA,KAAA3C,cAAAJ,qFACAyC,oBAfWC,YAeX/H,KAAAgI,SAAAvC,ggCA+EAlC,KAAAzD,UAAA+H,QAAA,SAhCQpC,IAgCRoC,SACA,MAAA7H,MAAA4H,QAAA,GAAAvC,SAAA4C,aAAAjI,KAAAkI,gBAAAL,QAAAM,cAAAE,QAAA5C,kCA9BAvE,KAAAC,cAAAA,6EAyDAD,KAAAoH,iBAKA,IAAAC,OAAA,SAAAjD,2GAAAgB,WAAAiC,MAAAjD,QAyBAiD,MAAAzI,UAAA8H,QAAA,SAAAnC,IAAAoC,SAMA,GAJA,gBApDWpC,OAqDXA,IACA,GAAAJ,SAAA4C,aAAAjI,KAAAkI,gBAAAL,QAAAM,cAAAC,IAAA,SAEA3C,cAAAJ,UA/CA,KAAA,IAAAmD,OAAA,2DALA,IAAA/C,IAAAW,SAAA+B,cAAAC,IAqDA,KApDgB,IAoDhBI,OAAA,8CAMA,OAxDWT,aAoDX/H,KAAAgI,SAAAvC,aAlCAlC,yBAZArC,KAAAC,cAAAA,aC9OAoH,MAAAnH,eAAA,WAAA,6HA0DAqH,YAAAxH,aACAC,KAAA+D,cAAAA,SAAAC,OACAH,YAGK2D,QAPSnF,KAOdoF,WAAAC,YAAAC,MAAAC,WAAAR,iBACAS,YACAL,QAAAJ,eAAAU,SAAAC,qBACAP,QAAAQ,gBAAAF,SAAAG,+NA6BAC,aAAAnI,aACAC,KAAA+D,cAAAA,SAAAC,OACAH,YAGA2D,QAAAH,MAAAI,WAAAU,aAAAR,MAAAS,aAAAhB,iBACAiB,cACAb,QAAAJ,eAAAU,SAAAC;;;;;;;GP9FApJ,uDAAA,WACA,QAAAA,4BAmBKA,mBAALC,UAAAC,QAAK,WADG,IAEIC,KAAKC,eAAeD,KAAKE,aAAc,qCADvC,OAEO,CACX,KAEIF,KAAKE,aAAaC,WAAW,YADjC,CACI,IAAGH,KAEKE,aAAaC,WAAW,WAG5B,MADAC,SAEQC,MAAM,0EACP,CANPD,SAEQE,KAAK,gFAMrB,QAEIN,KAAKC,eAAeD,KAAKO,SAAU,qCAInCP,KAAKC,eAAeD,KAAKQ,YAAa,0CAIxBC,IAFfT,KAEKU,QAA6C,GAAtBV,KAAKU,OAAOC,SAAeX,KAAKU,OAAOE,MAAM,SAACC,MAAS,MAAQ,IAARA,SADlFT,QAEQC,MAAM,kDACP,MAOdR,kBAALC,UAAAgB,yBAAK,WACG,MAAOd,MAAKE,aAAe,qCAG9BL,kBAALC,UAAAG,eAAK,SAAAc,eAAAC,UAKG,WAJqBP,IAIlBM,gBAJiD,IAAlBA,iBAK9BX,QAJQC,MAAMW,WACP,yBAKZnB,mBAAPoB,aACEC,KAAMC,cAIRA,aADCtB,kBAADuB,eAAC,WAAA,SCxED,IAAAC,iBAAA,WAKA,QAAAA,iBAAwBC,YAAAtB,KAAxBsB,WAAwBA,WAFZtB,KAAZuB,sBAA6C,SAO7CF,iBAAAvB,UAAA0B,sBAAA,WACQ,GAFIC,gBAEZA,kBAAQ,CAKA,GAFIC,cAAe1B,KAAKsB,WAAWK,QAAQC,QAAQ5B,KAAKuB,sBAIxD,IAFIG,kBAAgCjB,IAAhBiB,aAEpB,CAQA,MALUG,MAAKC,MAAMJ,iBAW7BL,gBAAAvB,UAAAiC,sBAAA,SALKC,OAMG,GALIC,KAAMJ,KAAKK,UAAUF,MAMzBhC,MALKsB,WAAWK,QAAQQ,QAAQnC,KAAKuB,sBAAuBU,wBAE7DZ,iBAAPJ,aACEC,KAAMC,cAKRA,aAFCE,gBAADD,eAAC,WAAA,QAQAF,KAAMrB,oBCzCP,IAAAuC,2BAAA,WAOA,QAAAA,2BADwBd,WAAuCe,KAAoBV,SAA3D3B,KAAxBsB,WAAwBA,WAAuCtB,KAA/DqC,KAA+DA,KAAoBrC,KAAnF2B,QAAmFA,QAM9E3B,KAALsC,2BAHqD,GAAIC,eAGzDA,cAH0E,SAErEH,2BAALtC,UAAA0C,gBAAK,WAMG,GALId,cAAe1B,KAAK2B,QAAQH,uBAE5BE,eAUAtB,QALQqC,MAAM,uCAMdzC,KALK0C,UAAYhB,aAMjB1B,KALKsC,2BAA2BK,SADhCvC,QALQqC,MAAM,sCAAwCzC,KAAKsB,WAAWR,2BAA6B,KAMnGd,KALK4C,mBASZR,0BAALtC,UAAA8C,eAAK,WAAA,GAALC,OAAA7C,IAQQA,MAPKqC,KAAKS,IAAI9C,KAAKsB,WAAWR,4BAA4BiC,UAAU,SAACC,MAQjE,GAPIC,cAAeD,KAAKE,OACpBC,OAAS,GAAIC,mBAQjBD,QAPOE,yBAA2BJ,aAAaK,uBAS/CT,MAPKH,UAAYS,OAQjBN,MAPKlB,QAAQI,sBAAsBc,MAAKH,WASxCG,MAPKP,2BAA2BK,sCAGrCP,2BAAPnB,aACEC,KAAMC,cAORA,aAJCiB,0BAADhB,eAAC,WAAA,QAUAF,KAAMrB,oBACNqB,KAAMqC,OACNrC,KAAMG,mBAPAe,0BAAPoB,gBAUAlB,6BATiCpB,KAAMuC,cASvCA,SAIA,IAAAL,oBAAA,WAAA,QAAAA,uBAwBA,MAAAA,uBCtFAM,gBAAA,WAIA,QAAAA,iBAAwBC,2BAAA3D,KAAxB2D,0BAAwBA,0BAGnB3D,KAAL4D,cAAwC,GAAIrB,eAA5CA,cAA6D,SAExDmB,iBAAL5D,UAAA+D,MAAK,SAAAC,QAAA,GAALjB,OAAA7C,SAEqBS,IAGVqD,QACC1D,QAHQC,MAAM,wCAGdyD,OAAO/D,WAIPK,QAHQC,MAAM,8DAMlBL,KAHK2D,0BAA0BrB,2BAA2BS,UAAU,WAgBhEF,MAHKe,cAAcjB,SAMvB3C,KAHK2D,0BAA0BnB,mBAMlCkB,gBAAL5D,UAAAiE,SAAK,WAKG,MAJO,IAGVL,gBAAL5D,UAAAkE,eAAK,aAIAN,gBAAL5D,UAAAmE,uBAAK,WASG,SARIxC,gBAQZA,oBARiCyC,OAAQC,SAASC,OAInCpE,KAAKqE,mBAAmBH,OAAOC,SAASC,OAGlDV,gBAAL5D,UAAAuE,mBAAK,SAAAD,MAYG,IAXI3C,gBAWZA,oBAXiCyC,OAAQC,SAASC,KAYtC,OAXO,CAGEpE,MAAKsE,UAAUJ,OAAOC,SAASC,KAc5C,QAXO,GAGVV,gBAAL5D,UAAAwE,UAAK,SAAAF,MACqBA,KAAKG,OAAO,GAAGC,MAAM,KAAKC,OAAO,SAACC,OAAsB7D,MAetE,GAdI8D,OAAQ9D,KAAK2D,MAAM,IAgBvB,OADAE,QAdOC,MAAM,IAAMA,MAAM,GAClBD,+BAGZhB,iBAAPzC,aACEC,KAAMC,cAcRA,aAXCuC,gBAADtC,eAAC,WAAA,QAiBAF,KAAMkB,6BAdAsB,gBAAPF,gBAiBAI,gBAhBoB1C,KAAMuC,cAgB1BA,SCrGA,IAAAmB,gBAAA,WAAA,QAAAA,yBAOKA,gBAALC,QAAK,WADG,OACIC,SAEUF,eADVG,WAEWrB,mBAOlBkB,eAALI,SAAK,WADG,OACIF,SAEUF,eADVG,WAEWrB,oCAGhBkB,gBAAP3D,aACEC,KAAM+D,cAFRA,SAEkBC,OADdC,gBAIAC,eASHR,eAADxD,eAAC,WAAA"}