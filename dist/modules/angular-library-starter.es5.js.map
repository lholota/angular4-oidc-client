{"version":3,"file":"angular-library-starter.es5.js","sources":["../../angular-library-starter.ts","../../public_api.ts","../../src/angular-oidc-auth.ts","../../src/modules/oidc-auth.module.ts","../../src/services/oidc-auth.service.ts","../../src/services/well-known-endpoints.service.ts","../../src/services/oidc-auth-storage.service.ts","../../src/auth-configuration.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {OidcAuthModule,AuthConfiguration} from './public_api';\n\nexport {OidcAuthStorage as ɵc} from './src/services/oidc-auth-storage.service';\nexport {OidcAuthService as ɵa} from './src/services/oidc-auth.service';\nexport {WellKnownEndpointsService as ɵb} from './src/services/well-known-endpoints.service';","/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n\n/**\n * Entry point for all public APIs of the package.\n */\nexport {OidcAuthModule,AuthConfiguration} from './src/angular-oidc-auth';\n","// Public classes.\n// TODO: Add public services\nexport { OidcAuthModule } from './modules/oidc-auth.module';\nexport { AuthConfiguration } from './auth-configuration';","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcAuthService } from '../services/oidc-auth.service';\nexport class OidcAuthModule {\n/**\n * Use in AppModule: new instance of SumService.\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: OidcAuthModule,\n            providers: [OidcAuthService]\n        };\n    }\n/**\n * Use in features modules with lazy loading: new instance of SumService.\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: OidcAuthModule,\n            providers: [OidcAuthService]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OidcAuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { WellKnownEndpointsService } from './well-known-endpoints.service';\r\nimport { isPlatformBrowser } from '@angular/common';\nexport class OidcAuthService {\n/**\n * @param {?} wellKnownEndpointsService\n */\nconstructor(private wellKnownEndpointsService: WellKnownEndpointsService) {\r\n    }\r\n\r\n     setupComplete: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @param {?} config\n * @return {?}\n */\npublic setup(config : AuthConfiguration) {\r\n\r\n        if(config == undefined) {\r\n            console.error(\"The configuration is null/undefined.\");\r\n        }\r\n\r\n        if(!config.isValid()){\r\n            console.error(\"The configuration is invalid, please fix the errors above.\");\r\n        }\r\n\r\n        this.wellKnownEndpointsService.onWellKnownEndpointsLoaded.subscribe(() => {\r\n            // Continue setup in here when the endpoints have been loaded\r\n\r\n            /*\r\n            Usecases\r\n                -> page is first load -> fetch token silently or redirect\r\n                -> page reload -> token in storage (no need to wait...)\r\n                -> page is a return from the authentication -> parse the tokens from the hash part of the url (no need to wait...)\r\n                -> start background stuff (has to wait)\r\n                    -> session-check\r\n                    -> token renewal\r\n            */\r\n\r\n            this.setupComplete.emit();\r\n        });\r\n\r\n        this.wellKnownEndpointsService.ensureEndpoints();\r\n    }\npublic tokenExpired : Observable<void>;\npublic isAuthorized : Observable<boolean>;\n/**\n * @return {?}\n */\npublic getToken() : string{\r\n        return \"\";\r\n    }\n/**\n * @return {?}\n */\npublic addAuthHeaders(/*options args*/) : void {\r\n\r\n    }\n/**\n * @return {?}\n */\nprivate parseTokenFromLocation() : boolean {\r\n        if(!isPlatformBrowser || !window.location.hash){\r\n            return false;\r\n        }\r\n\r\n        return this.parseTokenFromHash(window.location.hash);\r\n    }\n/**\n * @param {?} hash\n * @return {?}\n */\nprivate parseTokenFromHash(hash: string) : boolean {\r\n        if(!isPlatformBrowser || !window.location.hash){\r\n            return false;\r\n        }\r\n\r\n        var /** @type {?} */ parsed = this.parseHash(window.location.hash);\r\n        // If token(s) are found and are valid, save them to storage and\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} hash\n * @return {?}\n */\nprivate parseHash(hash: string) : any {\r\n        let /** @type {?} */ result: any = hash.substr(1).split('&').reduce(function (result: any, item: string) {\r\n            let /** @type {?} */ parts = item.split('=');\r\n            result[parts[0]] = parts[1];\r\n            return result;\r\n        }, {});\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WellKnownEndpointsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'setupComplete': [{ type: Output },],\n};\n}\n\nfunction OidcAuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthService.ctorParameters;\n/** @type {?} */\nOidcAuthService.propDecorators;\n/** @type {?} */\nOidcAuthService.prototype.setupComplete;\n/** @type {?} */\nOidcAuthService.prototype.tokenExpired;\n/** @type {?} */\nOidcAuthService.prototype.isAuthorized;\n/** @type {?} */\nOidcAuthService.prototype.wellKnownEndpointsService;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Output, EventEmitter } from '@angular/core';\r\nimport { SilentFetchBase } from './silent-fetch-base.service';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { Http } from '@angular/http';\r\nimport { OidcAuthStorage } from './oidc-auth-storage.service';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\nexport class WellKnownEndpointsService {\nprivate endpoints: WellKnownEndpoints;\n/**\n * @param {?} authConfig\n * @param {?} http\n * @param {?} storage\n */\nconstructor(private authConfig: AuthConfiguration,\nprivate http: Http,\nprivate storage: OidcAuthStorage) {\r\n    }\r\n\r\n     onWellKnownEndpointsLoaded: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @return {?}\n */\npublic ensureEndpoints() : void {\r\n        var /** @type {?} */ storageValue = this.storage.getWellKnownEndpoints();\r\n        \r\n        if(!storageValue) {\r\n            console.debug(\"Fetching endpoints from the server \" + this.authConfig.getWellKnownEndpointsUrl() + \".\");\r\n            this.fetchEndpoints();\r\n        }\r\n        else {\r\n            console.debug(\"Loading endpoints from the storage.\")\r\n            this.endpoints = storageValue;\r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate fetchEndpoints() : void {\r\n        this.http.get(this.authConfig.getWellKnownEndpointsUrl()).subscribe((data) => {\r\n            var /** @type {?} */ jsonResponse = data.json();\r\n            var /** @type {?} */ parsed = new WellKnownEndpoints();\r\n            parsed.authorizationEndpointUri = jsonResponse.authorization_endpoint;\r\n\r\n            this.endpoints = parsed;\r\n            this.storage.setWellKnownEndpoints(this.endpoints);\r\n            \r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: Http, },\n{type: OidcAuthStorage, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onWellKnownEndpointsLoaded': [{ type: Output },],\n};\n}\n\nfunction WellKnownEndpointsService_tsickle_Closure_declarations() {\n/** @type {?} */\nWellKnownEndpointsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWellKnownEndpointsService.ctorParameters;\n/** @type {?} */\nWellKnownEndpointsService.propDecorators;\n/** @type {?} */\nWellKnownEndpointsService.prototype.endpoints;\n/** @type {?} */\nWellKnownEndpointsService.prototype.onWellKnownEndpointsLoaded;\n/** @type {?} */\nWellKnownEndpointsService.prototype.authConfig;\n/** @type {?} */\nWellKnownEndpointsService.prototype.http;\n/** @type {?} */\nWellKnownEndpointsService.prototype.storage;\n}\n\nexport class WellKnownEndpoints {\npublic authorizationEndpointUri : string;\r\n}\n\nfunction WellKnownEndpoints_tsickle_Closure_declarations() {\n/** @type {?} */\nWellKnownEndpoints.prototype.authorizationEndpointUri;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { SilentFetchBase } from './silent-fetch-base.service';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { WellKnownEndpoints } from './well-known-endpoints.service';\nexport class OidcAuthStorage {\nprivate wellKnownEndpointsKey : string = \"\";\n/**\n * @param {?} authConfig\n */\nconstructor(private authConfig: AuthConfiguration) {\r\n    }\n/**\n * @return {?}\n */\ngetWellKnownEndpoints(): WellKnownEndpoints | undefined {\r\n        if(!isPlatformBrowser)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var /** @type {?} */ storageValue = this.authConfig.storage.getItem(this.wellKnownEndpointsKey);\r\n        \r\n        if(!storageValue || storageValue == undefined)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var /** @type {?} */ obj = JSON.parse(storageValue);\r\n        var /** @type {?} */ result = /** @type {?} */(( obj as WellKnownEndpoints));\r\n\r\n        return result;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nsetWellKnownEndpoints(value:WellKnownEndpoints) {\r\n        var /** @type {?} */ str = JSON.stringify(value);\r\n        this.authConfig.storage.setItem(this.wellKnownEndpointsKey, str);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction OidcAuthStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthStorage.ctorParameters;\n/** @type {?} */\nOidcAuthStorage.prototype.wellKnownEndpointsKey;\n/** @type {?} */\nOidcAuthStorage.prototype.authConfig;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport type NavigationMode = number;\nexport let NavigationMode: any = {};\nNavigationMode.SilentOnly = 0;\nNavigationMode.Redirect = 1;\nNavigationMode[NavigationMode.SilentOnly] = \"SilentOnly\";\nNavigationMode[NavigationMode.Redirect] = \"Redirect\";\n\nexport class AuthConfiguration {\nconstructor() {\r\n        // TODO: Set default values\r\n    }\npublic authorityUrl : string;\npublic enableSilentTokenRenewal: boolean;\npublic enableSessionCheck : boolean;\npublic sessionCheckIntervalInSeconds : number;\npublic silentTokenRenewalIntervalInSeconds : number;\npublic clientId : string;\npublic scopes : string[];\npublic navigationMode : NavigationMode;\npublic redirectUrl : string;\npublic postLogoutRedirectUri : string;\npublic storage: Storage;\n/**\n * @return {?}\n */\npublic isValid() : boolean {\r\n        if(!this.validateString(this.authorityUrl, \"The authorityUrl cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(!this.authorityUrl.startsWith(\"https://\"))\r\n        {\r\n            if(this.authorityUrl.startsWith(\"http://\")) {\r\n                console.warn(\"Make sure you are using the HTTPS version of the authorityUrl in production!\");\r\n            }\r\n            else {\r\n                console.error(\"The authorityUrl is not valid, it must start with https:// or http://\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if(!this.validateString(this.clientId, \"The clientId cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(!this.validateString(this.redirectUrl, \"The redirectUrl cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(this.scopes == undefined || this.scopes.length == 0 || this.scopes.every((item) => item == \"\")) {\r\n            console.error(\"There has to be at least one requested scope.\");\r\n            return false;\r\n        }\r\n\r\n        // TODO: validate urls properly, warn when url is only http\r\n        return true;\r\n    }\n/**\n * @return {?}\n */\npublic getWellKnownEndpointsUrl() : string {\r\n        return this.authorityUrl + '/.well-known/openid-configuration';\r\n    }\n/**\n * @param {?} validatedValue\n * @param {?} errorMsg\n * @return {?}\n */\nprivate validateString(validatedValue: string, errorMsg: string) : boolean {\r\n        if(validatedValue == undefined || validatedValue == \"\") {\r\n            console.error(errorMsg);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthConfiguration.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthConfiguration.ctorParameters;\n/** @type {?} */\nAuthConfiguration.prototype.authorityUrl;\n/** @type {?} */\nAuthConfiguration.prototype.enableSilentTokenRenewal;\n/** @type {?} */\nAuthConfiguration.prototype.enableSessionCheck;\n/** @type {?} */\nAuthConfiguration.prototype.sessionCheckIntervalInSeconds;\n/** @type {?} */\nAuthConfiguration.prototype.silentTokenRenewalIntervalInSeconds;\n/** @type {?} */\nAuthConfiguration.prototype.clientId;\n/** @type {?} */\nAuthConfiguration.prototype.scopes;\n/** @type {?} */\nAuthConfiguration.prototype.navigationMode;\n/** @type {?} */\nAuthConfiguration.prototype.redirectUrl;\n/** @type {?} */\nAuthConfiguration.prototype.postLogoutRedirectUri;\n/** @type {?} */\nAuthConfiguration.prototype.storage;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;;AOQA;IACA;;IAEA,CAAK;;;;IAiBA,mCAAA,GAAA;QADG,EAAR,CAAA,CAAW,CAEC,IAAC,CAAI,cAAC,CAAc,IAAC,CAAI,YAAC,EAAa,mCAAA,CAAoC,CAFvF,CAEyF,CAFzF;YACY,MAAZ,CAEmB,KAAA,CAAM;QADzB,CAAS;QAED,EAAR,CAAA,CAAW,CAEC,IAAC,CAAI,YAAC,CAAY,UAAC,CAAU,UAAC,CAAU,CAFpD,CACQ,CADR;YAEY,EAAZ,CAAA,CAAe,IAEC,CAAI,YAAC,CAAY,UAAC,CAAU,SAAC,CAAS,CAFtD,CAEwD,CAFxD;gBACgB,OAAO,CAEC,IAAC,CAAI,8EAAC,CAA8E,CAAC;YAD7G,CAAa;YAGb,IAAA,CAAiB,CAAjB;gBADgB,OAAO,CAEC,KAAC,CAAK,uEAAC,CAAuE,CAAC;gBADvF,MAAhB,CAEuB,KAAA,CAAM;YAD7B,CAAa;QACb,CAAS;QAED,EAAR,CAAA,CAAW,CAEC,IAAC,CAAI,cAAC,CAAc,IAAC,CAAI,QAAC,EAAS,+BAAA,CAAgC,CAF/E,CAEiF,CAFjF;YACY,MAAZ,CAEmB,KAAA,CAAM;QADzB,CAAS;QAED,EAAR,CAAA,CAAW,CAEC,IAAC,CAAI,cAAC,CAAc,IAAC,CAAI,WAAC,EAAY,kCAAA,CAAmC,CAFrF,CAEuF,CAFvF;YACY,MAAZ,CAEmB,KAAA,CAAM;QADzB,CAAS;QAED,EAAR,CAAA,CAAW,IAEC,CAAI,MAAC,IAAS,SAAA,IAAa,IAAA,CAAK,MAAC,CAAM,MAAC,IAAS,CAAA,IAAK,IAAA,CAAK,MAAC,CAAM,KAAC,CAAK,UAAC,IAAC,IAAQ,OAAA,IAAA,IAAQ,EAAA,EAAR,CAAQ,CAAG,CAFzG,CAE2G,CAF3G;YACY,OAAO,CAEC,KAAC,CAAK,+CAAC,CAA+C,CAAC;YAD/D,MAAZ,CAEmB,KAAA,CAAM;QADzB,CAAS;;QAGD,MAAR,CAEe,IAAA,CAAK;IADpB,CAAK;;;;IAIA,oDAAA,GAAA;QACG,MAAR,CAAe,IAAA,CAAK,YAAC,GAAc,mCAAA,CAAoC;IACvE,CAAK;;;;;;IAEA,0CAAA,GAAA,UAAA,cAAA,EAAA,QAAA;QAKG,EAAR,CAAA,CAAW,cAJC,IAAiB,SAAA,IAAa,cAAA,IAAkB,EAAA,CAI5D,CAJgE,CAIhE;YACY,OAAO,CAJC,KAAC,CAAK,QAAC,CAAQ,CAAC;YAKxB,MAAZ,CAJmB,KAAA,CAAM;QAKzB,CAAS;QAED,MAAR,CAJe,IAAA,CAAK;IAKpB,CAAK;;CApEL;AAiEO,iBAAP,CAAA,UAAO,GAAoC;IAK3C,EAJE,IAAA,EAAM,UAAA,EAAW;CAKlB,CAJC;;;;AAED,iBAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EAOA,EAPA,CAOA,CAAC;AD/EF;;;;IAKA,yBAAwB,UAAY;QAAZ,IAAxB,CAAA,UAAwB,GAAA,UAAA,CAAY;QAFxB,IAAZ,CAAA,qBAAY,GAAiC,EAAA,CAAG;IAGhD,CAAK;;;;IAIL,+CAFK,GAEL;QACQ,EAAR,CAAA,CAAW,CAFC,iBAAC,CAEb,CACQ,CADR;YAEY,MAAZ,CAAmB;QACnB,CAAS;QAED,IAAR,gBAAA,CAFY,YAAA,GAAe,IAAA,CAAK,UAAC,CAAU,OAAC,CAAO,OAAC,CAAO,IAAC,CAAI,qBAAC,CAAqB,CAAC;QAI/E,EAAR,CAAA,CAAW,CAFC,YAAC,IAAe,YAAA,IAAgB,SAAA,CAE5C,CACQ,CADR;YAEY,MAAZ,CAAmB;QACnB,CAAS;QAED,IAAR,gBAAA,CAFY,GAAA,GAAM,IAAA,CAAK,KAAC,CAAK,YAAC,CAAY,CAAC;QAGnC,IAAR,gBAAA,CAFY,MAAA,GAEZ,CAFqB,GAAO,CAAA,CAAmB;QAIvC,MAAR,CAFe,MAAA,CAAO;IAGtB,CAAK;;;;;IAKL,+CALK,GAKL,UALK,KAAA;QAMG,IAAR,gBAAA,CALY,GAAA,GAAM,IAAA,CAAK,SAAC,CAAS,KAAC,CAAK,CAAC;QAMhC,IAAI,CALC,UAAC,CAAU,OAAC,CAAO,OAAC,CAAO,IAAC,CAAI,qBAAC,EAAsB,GAAA,CAAI,CAAC;IAMzE,CAAK;;CAnCL;AA+BO,eAAP,CAAA,UAAO,GAAoC;IAM3C,EALE,IAAA,EAAM,UAAA,EAAW;CAMlB,CALC;;;;AAED,eAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAQD,EAAC,IAAI,EAAE,iBAAiB,GAAG;CAC1B,EATA,CASA,CAAC;AD1CF;;;;;;IAOA,mCADwB,UAAY,EAA2B,IAAM,EAAc,OAAS;QAApE,IAAxB,CAAA,UAAwB,GAAA,UAAA,CAAY;QAA2B,IAA/D,CAAA,IAA+D,GAAA,IAAA,CAAM;QAAc,IAAnF,CAAA,OAAmF,GAAA,OAAA,CAAS;QAMvF,IAAL,CAAA,0BAA+B,GAHsB,IAAI,YAAA,CAAiB,IAAE,CAAI,CAAC;IACjF,CAAK;;;;IACA,mDAAA,GAAA;QAMG,IAAR,gBAAA,CALY,YAAA,GAAe,IAAA,CAAK,OAAC,CAAO,qBAAC,EAAqB,CAAE;QAOxD,EAAR,CAAA,CAAW,CALC,YAAC,CAKb,CAL0B,CAK1B;YACY,OAAO,CALC,KAAC,CAAK,qCAAC,GAAuC,IAAA,CAAK,UAAC,CAAU,wBAAC,EAAwB,GAAI,GAAA,CAAI,CAAC;YAMxG,IAAI,CALC,cAAC,EAAc,CAAE;QAMlC,CAAS;QAJT,IAAA,CAAa,CAAb;YAMY,OAAO,CALC,KAAC,CAAK,qCAAC,CAAqC,CAAA;YAMpD,IAAI,CALC,SAAC,GAAW,YAAA,CAAa;YAM9B,IAAI,CALC,0BAAC,CAA0B,IAAC,EAAI,CAAE;QAMnD,CAAS;IACT,CAAK;;;;IAHA,kDAAA,GAAA;QAAA,iBAkBA;QAVG,IAAI,CAPC,IAAC,CAAI,GAAC,CAAG,IAAC,CAAI,UAAC,CAAU,wBAAC,EAAwB,CAAE,CAAC,SAAC,CAAS,UAAC,IAAC;YAQlE,IAAZ,gBAAA,CAPgB,YAAA,GAAe,IAAA,CAAK,IAAC,EAAI,CAAE;YAQ/B,IAAZ,gBAAA,CAPgB,MAAA,GAAS,IAAI,kBAAA,EAAmB,CAAE;YAQtC,MAAM,CAPC,wBAAC,GAA0B,YAAA,CAAa,sBAAC,CAAsB;YAStE,KAAI,CAPC,SAAC,GAAW,MAAA,CAAO;YAQxB,KAAI,CAPC,OAAC,CAAO,qBAAC,CAAqB,KAAC,CAAI,SAAC,CAAS,CAAC;YASnD,KAAI,CAPC,0BAAC,CAA0B,IAAC,EAAI,CAAE;QAQnD,CAAS,CAPC,CAAC;IAQX,CAAK;;CA3CL;AAqCO,yBAAP,CAAA,UAAO,GAAoC;IAQ3C,EAPE,IAAA,EAAM,UAAA,EAAW;CAQlB,CAPC;;;;AAED,yBAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAUD,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,IAAI,GAAG;IACd,EAAC,IAAI,EAAE,eAAe,GAAG;CACxB,EAbA,CAaA,CAAC;AARK,yBAAP,CAAA,cAAO,GAAyD;IAUhE,4BAA4B,EATE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAU/C,CATC;AAYF;IAAA;IAwBA,CAAC;IAAD,yBAAC;AAAD,CAAC,AAxBD,IAwBC;ADtFD;;;;IAIA,yBAAwB,yBAA2B;QAA3B,IAAxB,CAAA,yBAAwB,GAAA,yBAAA,CAA2B;QAG9C,IAAL,CAAA,aAAkB,GAAsB,IAAI,YAAA,CAAiB,IAAE,CAAI,CAAC;IAFpE,CAAK;;;;;IAIA,+BAAA,GAAA,UAAA,MAAA;QAAA,iBA8BA;QAzBG,EAAR,CAAA,CAAW,MAHC,IAAS,SAAA,CAGrB,CAHgC,CAGhC;YACY,OAAO,CAHC,KAAC,CAAK,sCAAC,CAAsC,CAAC;QAIlE,CAAS;QAED,EAAR,CAAA,CAAW,CAHC,MAAC,CAAM,OAAC,EAAO,CAG3B,CAH6B,CAG7B;YACY,OAAO,CAHC,KAAC,CAAK,4DAAC,CAA4D,CAAC;QAIxF,CAAS;QAED,IAAI,CAHC,yBAAC,CAAyB,0BAAC,CAA0B,SAAC,CAAS;;;;;;;;;;;YAgBhE,KAAI,CAHC,aAAC,CAAa,IAAC,EAAI,CAAE;QAItC,CAAS,CAHC,CAAC;QAKH,IAAI,CAHC,yBAAC,CAAyB,eAAC,EAAe,CAAE;IAIzD,CAAK;;;;IAEA,kCAAA,GAAA;QAKG,MAAR,CAJe,EAAA,CAAG;IAKlB,CAAK;;;;IAFA,wCAAA,GAAA;IAQL,CAAK;;;;IAJA,gDAAA,GAAA;QASG,EAAR,CAAA,CAAW,CARC,iBAAC,IAAoB,CAAA,MAAE,CAAM,QAAC,CAAQ,IAAC,CAQnD,CARuD,CAQvD;YACY,MAAZ,CARmB,KAAA,CAAM;QASzB,CAAS;QAED,MAAR,CARe,IAAA,CAAK,kBAAC,CAAkB,MAAC,CAAM,QAAC,CAAQ,IAAC,CAAI,CAAC;IAS7D,CAAK;;;;;IANA,4CAAA,GAAA,UAAA,IAAA;QAYG,EAAR,CAAA,CAAW,CAXC,iBAAC,IAAoB,CAAA,MAAE,CAAM,QAAC,CAAQ,IAAC,CAWnD,CAXuD,CAWvD;YACY,MAAZ,CAXmB,KAAA,CAAM;QAYzB,CAAS;QAED,IAAR,gBAAA,CAXY,MAAA,GAAS,IAAA,CAAK,SAAC,CAAS,MAAC,CAAM,QAAC,CAAQ,IAAC,CAAI,CAAC;;QAclD,MAAR,CAXe,IAAA,CAAK;IAYpB,CAAK;;;;;IATA,mCAAA,GAAA,UAAA,IAAA;QAeG,IAAR,gBAAA,CAdY,MAAA,GAAc,IAAA,CAAK,MAAC,CAAM,CAAC,CAAC,CAAC,KAAC,CAAK,GAAC,CAAG,CAAC,MAAC,CAAM,UAAC,MAAiB,EAAK,IAAM;YAe5E,IAAZ,gBAAA,CAdgB,KAAA,GAAQ,IAAA,CAAK,KAAC,CAAK,GAAC,CAAG,CAAC;YAe5B,MAAM,CAdC,KAAC,CAAK,CAAC,CAAC,CAAC,GAAG,KAAA,CAAM,CAAC,CAAC,CAAC;YAe5B,MAAZ,CAdmB,MAAA,CAAO;QAe1B,CAAS,EAdE,EAAA,CAAG,CAAC;IAef,CAAK;;CAxFL;AA2EO,eAAP,CAAA,UAAO,GAAoC;IAe3C,EAdE,IAAA,EAAM,UAAA,EAAW;CAelB,CAdC;;;;AAED,eAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAiBD,EAAC,IAAI,EAAE,yBAAyB,GAAG;CAClC,EAlBA,CAkBA,CAAC;AAfK,eAAP,CAAA,cAAO,GAAyD;IAiBhE,eAAe,EAhBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAiBlC,CAhBC;ADtFF;IAAA;;;;;;IAOK,sBAAA,GAAA;QADG,MAAR,CAEe;YADH,QAAQ,EAEE,cAAA;YADV,SAAS,EAEE,CAAA,eAAE,CAAe;SAD/B,CAEC;IADV,CAAK;;;;;IAOA,uBAAA,GAAA;QADG,MAAR,CAEe;YADH,QAAQ,EAEE,cAAA;YADV,SAAS,EAEE,CAAA,eAAE,CAAe;SAD/B,CAEC;IADV,CAAK;;CApBL;AAuBO,cAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,YAAY,EAEE,EACb;gBACD,OAAO,EAEE,EACR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,cAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EACA,EADA,CACA,CAAC;ADxCF,kBAAA;AACA,4BAA4B;ADD5B;;;;;;;;;GAUG;ADVH;;GAEG;;"}