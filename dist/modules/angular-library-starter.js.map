{"version":3,"file":"angular-library-starter.js","sources":["../../angular-library-starter.ts","../../public_api.ts","../../src/angular-oidc-auth.ts","../../src/modules/oidc-auth.module.ts","../../src/services/oidc-auth.service.ts","../../src/services/well-known-endpoints.service.ts","../../src/services/oidc-auth-storage.service.ts","../../src/auth-configuration.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {OidcAuthModule,AuthConfiguration} from './public_api';\n\nexport {OidcAuthStorage as ɵc} from './src/services/oidc-auth-storage.service';\nexport {OidcAuthService as ɵa} from './src/services/oidc-auth.service';\nexport {WellKnownEndpointsService as ɵb} from './src/services/well-known-endpoints.service';","/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n\n/**\n * Entry point for all public APIs of the package.\n */\nexport {OidcAuthModule,AuthConfiguration} from './src/angular-oidc-auth';\n","// Public classes.\n// TODO: Add public services\nexport { OidcAuthModule } from './modules/oidc-auth.module';\nexport { AuthConfiguration } from './auth-configuration';","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcAuthService } from '../services/oidc-auth.service';\nexport class OidcAuthModule {\n/**\n * Use in AppModule: new instance of SumService.\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: OidcAuthModule,\n            providers: [OidcAuthService]\n        };\n    }\n/**\n * Use in features modules with lazy loading: new instance of SumService.\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: OidcAuthModule,\n            providers: [OidcAuthService]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OidcAuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { WellKnownEndpointsService } from './well-known-endpoints.service';\r\nimport { isPlatformBrowser } from '@angular/common';\nexport class OidcAuthService {\n/**\n * @param {?} wellKnownEndpointsService\n */\nconstructor(private wellKnownEndpointsService: WellKnownEndpointsService) {\r\n    }\r\n\r\n     setupComplete: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @param {?} config\n * @return {?}\n */\npublic setup(config : AuthConfiguration) {\r\n\r\n        if(config == undefined) {\r\n            console.error(\"The configuration is null/undefined.\");\r\n        }\r\n\r\n        if(!config.isValid()){\r\n            console.error(\"The configuration is invalid, please fix the errors above.\");\r\n        }\r\n\r\n        this.wellKnownEndpointsService.onWellKnownEndpointsLoaded.subscribe(() => {\r\n            // Continue setup in here when the endpoints have been loaded\r\n\r\n            /*\r\n            Usecases\r\n                -> page is first load -> fetch token silently or redirect\r\n                -> page reload -> token in storage (no need to wait...)\r\n                -> page is a return from the authentication -> parse the tokens from the hash part of the url (no need to wait...)\r\n                -> start background stuff (has to wait)\r\n                    -> session-check\r\n                    -> token renewal\r\n            */\r\n\r\n            this.setupComplete.emit();\r\n        });\r\n\r\n        this.wellKnownEndpointsService.ensureEndpoints();\r\n    }\npublic tokenExpired : Observable<void>;\npublic isAuthorized : Observable<boolean>;\n/**\n * @return {?}\n */\npublic getToken() : string{\r\n        return \"\";\r\n    }\n/**\n * @return {?}\n */\npublic addAuthHeaders(/*options args*/) : void {\r\n\r\n    }\n/**\n * @return {?}\n */\nprivate parseTokenFromLocation() : boolean {\r\n        if(!isPlatformBrowser || !window.location.hash){\r\n            return false;\r\n        }\r\n\r\n        return this.parseTokenFromHash(window.location.hash);\r\n    }\n/**\n * @param {?} hash\n * @return {?}\n */\nprivate parseTokenFromHash(hash: string) : boolean {\r\n        if(!isPlatformBrowser || !window.location.hash){\r\n            return false;\r\n        }\r\n\r\n        var /** @type {?} */ parsed = this.parseHash(window.location.hash);\r\n        // If token(s) are found and are valid, save them to storage and\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} hash\n * @return {?}\n */\nprivate parseHash(hash: string) : any {\r\n        let /** @type {?} */ result: any = hash.substr(1).split('&').reduce(function (result: any, item: string) {\r\n            let /** @type {?} */ parts = item.split('=');\r\n            result[parts[0]] = parts[1];\r\n            return result;\r\n        }, {});\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WellKnownEndpointsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'setupComplete': [{ type: Output },],\n};\n}\n\nfunction OidcAuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthService.ctorParameters;\n/** @type {?} */\nOidcAuthService.propDecorators;\n/** @type {?} */\nOidcAuthService.prototype.setupComplete;\n/** @type {?} */\nOidcAuthService.prototype.tokenExpired;\n/** @type {?} */\nOidcAuthService.prototype.isAuthorized;\n/** @type {?} */\nOidcAuthService.prototype.wellKnownEndpointsService;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Output, EventEmitter } from '@angular/core';\r\nimport { SilentFetchBase } from './silent-fetch-base.service';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { Http } from '@angular/http';\r\nimport { OidcAuthStorage } from './oidc-auth-storage.service';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\nexport class WellKnownEndpointsService {\nprivate endpoints: WellKnownEndpoints;\n/**\n * @param {?} authConfig\n * @param {?} http\n * @param {?} storage\n */\nconstructor(private authConfig: AuthConfiguration,\nprivate http: Http,\nprivate storage: OidcAuthStorage) {\r\n    }\r\n\r\n     onWellKnownEndpointsLoaded: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @return {?}\n */\npublic ensureEndpoints() : void {\r\n        var /** @type {?} */ storageValue = this.storage.getWellKnownEndpoints();\r\n        \r\n        if(!storageValue) {\r\n            console.debug(\"Fetching endpoints from the server \" + this.authConfig.getWellKnownEndpointsUrl() + \".\");\r\n            this.fetchEndpoints();\r\n        }\r\n        else {\r\n            console.debug(\"Loading endpoints from the storage.\")\r\n            this.endpoints = storageValue;\r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate fetchEndpoints() : void {\r\n        this.http.get(this.authConfig.getWellKnownEndpointsUrl()).subscribe((data) => {\r\n            var /** @type {?} */ jsonResponse = data.json();\r\n            var /** @type {?} */ parsed = new WellKnownEndpoints();\r\n            parsed.authorizationEndpointUri = jsonResponse.authorization_endpoint;\r\n\r\n            this.endpoints = parsed;\r\n            this.storage.setWellKnownEndpoints(this.endpoints);\r\n            \r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: Http, },\n{type: OidcAuthStorage, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onWellKnownEndpointsLoaded': [{ type: Output },],\n};\n}\n\nfunction WellKnownEndpointsService_tsickle_Closure_declarations() {\n/** @type {?} */\nWellKnownEndpointsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWellKnownEndpointsService.ctorParameters;\n/** @type {?} */\nWellKnownEndpointsService.propDecorators;\n/** @type {?} */\nWellKnownEndpointsService.prototype.endpoints;\n/** @type {?} */\nWellKnownEndpointsService.prototype.onWellKnownEndpointsLoaded;\n/** @type {?} */\nWellKnownEndpointsService.prototype.authConfig;\n/** @type {?} */\nWellKnownEndpointsService.prototype.http;\n/** @type {?} */\nWellKnownEndpointsService.prototype.storage;\n}\n\nexport class WellKnownEndpoints {\npublic authorizationEndpointUri : string;\r\n}\n\nfunction WellKnownEndpoints_tsickle_Closure_declarations() {\n/** @type {?} */\nWellKnownEndpoints.prototype.authorizationEndpointUri;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { SilentFetchBase } from './silent-fetch-base.service';\r\nimport { AuthConfiguration } from '../auth-configuration';\r\nimport { WellKnownEndpoints } from './well-known-endpoints.service';\nexport class OidcAuthStorage {\nprivate wellKnownEndpointsKey : string = \"\";\n/**\n * @param {?} authConfig\n */\nconstructor(private authConfig: AuthConfiguration) {\r\n    }\n/**\n * @return {?}\n */\ngetWellKnownEndpoints(): WellKnownEndpoints | undefined {\r\n        if(!isPlatformBrowser)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var /** @type {?} */ storageValue = this.authConfig.storage.getItem(this.wellKnownEndpointsKey);\r\n        \r\n        if(!storageValue || storageValue == undefined)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var /** @type {?} */ obj = JSON.parse(storageValue);\r\n        var /** @type {?} */ result = /** @type {?} */(( obj as WellKnownEndpoints));\r\n\r\n        return result;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nsetWellKnownEndpoints(value:WellKnownEndpoints) {\r\n        var /** @type {?} */ str = JSON.stringify(value);\r\n        this.authConfig.storage.setItem(this.wellKnownEndpointsKey, str);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction OidcAuthStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcAuthStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcAuthStorage.ctorParameters;\n/** @type {?} */\nOidcAuthStorage.prototype.wellKnownEndpointsKey;\n/** @type {?} */\nOidcAuthStorage.prototype.authConfig;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport type NavigationMode = number;\nexport let NavigationMode: any = {};\nNavigationMode.SilentOnly = 0;\nNavigationMode.Redirect = 1;\nNavigationMode[NavigationMode.SilentOnly] = \"SilentOnly\";\nNavigationMode[NavigationMode.Redirect] = \"Redirect\";\n\nexport class AuthConfiguration {\nconstructor() {\r\n        // TODO: Set default values\r\n    }\npublic authorityUrl : string;\npublic enableSilentTokenRenewal: boolean;\npublic enableSessionCheck : boolean;\npublic sessionCheckIntervalInSeconds : number;\npublic silentTokenRenewalIntervalInSeconds : number;\npublic clientId : string;\npublic scopes : string[];\npublic navigationMode : NavigationMode;\npublic redirectUrl : string;\npublic postLogoutRedirectUri : string;\npublic storage: Storage;\n/**\n * @return {?}\n */\npublic isValid() : boolean {\r\n        if(!this.validateString(this.authorityUrl, \"The authorityUrl cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(!this.authorityUrl.startsWith(\"https://\"))\r\n        {\r\n            if(this.authorityUrl.startsWith(\"http://\")) {\r\n                console.warn(\"Make sure you are using the HTTPS version of the authorityUrl in production!\");\r\n            }\r\n            else {\r\n                console.error(\"The authorityUrl is not valid, it must start with https:// or http://\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if(!this.validateString(this.clientId, \"The clientId cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(!this.validateString(this.redirectUrl, \"The redirectUrl cannot be empty.\")) {\r\n            return false;\r\n        }\r\n\r\n        if(this.scopes == undefined || this.scopes.length == 0 || this.scopes.every((item) => item == \"\")) {\r\n            console.error(\"There has to be at least one requested scope.\");\r\n            return false;\r\n        }\r\n\r\n        // TODO: validate urls properly, warn when url is only http\r\n        return true;\r\n    }\n/**\n * @return {?}\n */\npublic getWellKnownEndpointsUrl() : string {\r\n        return this.authorityUrl + '/.well-known/openid-configuration';\r\n    }\n/**\n * @param {?} validatedValue\n * @param {?} errorMsg\n * @return {?}\n */\nprivate validateString(validatedValue: string, errorMsg: string) : boolean {\r\n        if(validatedValue == undefined || validatedValue == \"\") {\r\n            console.error(errorMsg);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthConfiguration.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthConfiguration.ctorParameters;\n/** @type {?} */\nAuthConfiguration.prototype.authorityUrl;\n/** @type {?} */\nAuthConfiguration.prototype.enableSilentTokenRenewal;\n/** @type {?} */\nAuthConfiguration.prototype.enableSessionCheck;\n/** @type {?} */\nAuthConfiguration.prototype.sessionCheckIntervalInSeconds;\n/** @type {?} */\nAuthConfiguration.prototype.silentTokenRenewalIntervalInSeconds;\n/** @type {?} */\nAuthConfiguration.prototype.clientId;\n/** @type {?} */\nAuthConfiguration.prototype.scopes;\n/** @type {?} */\nAuthConfiguration.prototype.navigationMode;\n/** @type {?} */\nAuthConfiguration.prototype.redirectUrl;\n/** @type {?} */\nAuthConfiguration.prototype.postLogoutRedirectUri;\n/** @type {?} */\nAuthConfiguration.prototype.storage;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}